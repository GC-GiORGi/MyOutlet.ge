neric]:shell_sdk_dist_esm["InputDeviceType"].xbox},[shell_sdk_dist_esm["PlatformType"].IOS]:{[shell_sdk_dist_esm["GamepadBrand"].Keyboard]:shell_sdk_dist_esm["InputDeviceType"].keyboard,[shell_sdk_dist_esm["GamepadBrand"].PlayStation]:shell_sdk_dist_esm["InputDeviceType"].playstation,[shell_sdk_dist_esm["GamepadBrand"].Xbox]:shell_sdk_dist_esm["InputDeviceType"].xbox,[shell_sdk_dist_esm["GamepadBrand"].Stadia]:shell_sdk_dist_esm["InputDeviceType"].stadia,[shell_sdk_dist_esm["GamepadBrand"].Generic]:shell_sdk_dist_esm["InputDeviceType"].xbox}};class InputDeviceTypeCalculator_InputDeviceTypeCalculator{constructor(_logger){this._logger=_logger}calculate(platformType,brand){return void 0===brand||null===brand?this.getDefaultInputDeviceType(platformType):this.getInputDeviceType(platformType,brand)}getInputDeviceType(platformType,brand){const map=inputDeviceTypeMap[platformType];if(void 0===map)return this._logger.warn("Brand to input device type map could not be retrieved for platform type. Default input device type will be used.",{platformType,brand}),this.getDefaultInputDeviceType(platformType);const inputDeviceType=map[brand];return void 0===inputDeviceType?(this._logger.warn("Input device type could not be retrieved. Default input device type will be used.",{platformType,brand}),this.getDefaultInputDeviceType(platformType)):inputDeviceType}getDefaultInputDeviceType(platformType){const inputDeviceType=defaultInputDeviceTypeMap[platformType];return void 0===inputDeviceType?(this._logger.warn('Default input device type could not be retrieved for platform type. "'.concat(shell_sdk_dist_esm["InputDeviceType"].keyboard," will be used."),{platformType}),shell_sdk_dist_esm["InputDeviceType"].keyboard):inputDeviceType}}const defaultNavigationMethodMap={[shell_sdk_dist_esm["PlatformType"].PC]:shell_sdk_dist_esm["NavigationMethod"].mouse,[shell_sdk_dist_esm["PlatformType"].Luna]:shell_sdk_dist_esm["NavigationMethod"].directional,[shell_sdk_dist_esm["PlatformType"].PS4]:shell_sdk_dist_esm["NavigationMethod"].directional,[shell_sdk_dist_esm["PlatformType"].PS5]:shell_sdk_dist_esm["NavigationMethod"].directional,[shell_sdk_dist_esm["PlatformType"].XONE]:shell_sdk_dist_esm["NavigationMethod"].directional,[shell_sdk_dist_esm["PlatformType"].Scarlett]:shell_sdk_dist_esm["NavigationMethod"].directional,[shell_sdk_dist_esm["PlatformType"].ScarlettUWP]:shell_sdk_dist_esm["NavigationMethod"].directional,[shell_sdk_dist_esm["PlatformType"].Stadia]:shell_sdk_dist_esm["NavigationMethod"].directional,[shell_sdk_dist_esm["PlatformType"].Mobile]:shell_sdk_dist_esm["NavigationMethod"].touch,[shell_sdk_dist_esm["PlatformType"].IOS]:shell_sdk_dist_esm["NavigationMethod"].touch,[shell_sdk_dist_esm["PlatformType"].Android]:shell_sdk_dist_esm["NavigationMethod"].touch,[shell_sdk_dist_esm["PlatformType"].Web]:shell_sdk_dist_esm["NavigationMethod"].mouse},navigationMethodMap={[shell_sdk_dist_esm["PlatformType"].PC]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].mouse},[shell_sdk_dist_esm["PlatformType"].Luna]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].mouse},[shell_sdk_dist_esm["PlatformType"].Web]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].mouse},[shell_sdk_dist_esm["PlatformType"].PS4]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].directional},[shell_sdk_dist_esm["PlatformType"].PS5]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].directional},[shell_sdk_dist_esm["PlatformType"].XONE]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].directional},[shell_sdk_dist_esm["PlatformType"].Scarlett]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].directional},[shell_sdk_dist_esm["PlatformType"].ScarlettUWP]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].directional},[shell_sdk_dist_esm["PlatformType"].Mobile]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].touch,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].touch},[shell_sdk_dist_esm["PlatformType"].Android]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].touch,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].touch},[shell_sdk_dist_esm["PlatformType"].IOS]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].touch,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].touch}},stadiaNavigationMethodMap={[shell_sdk_dist_esm["DisplayMode"].Desktop]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].mouse,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].mouse},[shell_sdk_dist_esm["DisplayMode"].MobileLandscape]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].touch,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].touch},[shell_sdk_dist_esm["DisplayMode"].MobilePortrait]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].touch,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].touch},[shell_sdk_dist_esm["DisplayMode"].TV]:{[InputEventDeviceType.gamepad]:shell_sdk_dist_esm["NavigationMethod"].directional,[InputEventDeviceType.keyboard]:shell_sdk_dist_esm["NavigationMethod"].mouse,[InputEventDeviceType.mouse]:shell_sdk_dist_esm["NavigationMethod"].mouse}},ButtonsTreatedAsGamepadInputDeviceTypeWithKeyboard=[gamepad_manager_dist_esm["c"].DpadDown,gamepad_manager_dist_esm["c"].DpadUp,gamepad_manager_dist_esm["c"].DpadLeft,gamepad_manager_dist_esm["c"].DpadRight,gamepad_manager_dist_esm["c"].A,gamepad_manager_dist_esm["c"].B];class NavigationMethodCalculator_NavigationMethodCalculator{constructor(_logger){this._logger=_logger}calculate(platformType,inputEventDeviceType,displayMode){return void 0===inputEventDeviceType?this.getDefaultNavigationMethod(platformType):this.getNavigationMethod(platformType,inputEventDeviceType,displayMode)}getDefaultNavigationMethod(platformType){const navigationMethod=defaultNavigationMethodMap[platformType];return void 0===navigationMethod?(this._logger.warn('Default navigation method could not be retrieved. "'.concat(shell_sdk_dist_esm["NavigationMethod"].mouse," will be used."),{platformType}),shell_sdk_dist_esm["NavigationMethod"].mouse):navigationMethod}getNavigationMethod(platformType,inputEventDeviceType,displayMode){return platformType===shell_sdk_dist_esm["PlatformType"].Stadia?this.getNavigationMethodStadia(platformType,inputEventDeviceType,displayMode):this.getNavigationMethodGeneral(platformType,inputEventDeviceType)}getNavigationMethodGeneral(platformType,inputEventDeviceType){const map=navigationMethodMap[platformType];if(void 0===map)return this._logger.warn("Input event type to navigation method map could not be retrieved for platform type. Default navigation method will be used.",{platformType}),this.getDefaultNavigationMethod(platformType);const navigationMethod=map[inputEventDeviceType];return void 0===navigationMethod?(this._logger.warn("Navigation method could not be retrieved for input event type. Default navigation method will be used.",{platformType,inputEventDeviceType}),this.getDefaultNavigationMethod(platformType)):navigationMethod}getNavigationMethodStadia(platformType,inputEventDeviceType,displayMode){if(void 0===displayMode)return this._logger.warn("Display mode is not defined. Default navigation method will be used.",{platformType,inputEventDeviceType,displayMode}),this.getDefaultNavigationMethod(platformType);const map=stadiaNavigationMethodMap[displayMode];if(void 0===map)return this._logger.warn("Input event type to navigation method map could not be retrieved for display mode. Default navigation method will be used.",{platformType,inputEventDeviceType,displayMode}),this.getDefaultNavigationMethod(platformType);const navigationMethod=map[inputEventDeviceType];return void 0===navigationMethod?(this._logger.warn("Navigation method could not be retrieved for input event type. Default navigation method will be used.",{platformType,inputEventDeviceType,displayMode}),this.getDefaultNavigationMethod(platformType)):navigationMethod}}class GamepadSubject_GamepadSubject{constructor(_logger){this._logger=_logger,this._subject=new Subject["a"],this._subscribers=new Map}subscribe(spaceId,callback){const observer=this.createObserver(spaceId,callback);this.setSubscription(spaceId,observer)}createObserver(spaceId,callback){return{next:value=>{try{const retValue=callback(value);retValue instanceof Promise&&retValue.catch(e=>{this.logCallbackError(spaceId,e)})}catch(e){this.logCallbackError(spaceId,e)}}}}logCallbackError(spaceId,e){this._logger.error("Error in gamepad event callback",{applicationInfo:spaceId,error:e,logCategory:LogCategory["a"].api})}setSubscription(spaceId,observer){var _a;this._subscribers.has(spaceId)&&(null===(_a=this._subscribers.get(spaceId))||void 0===_a||_a.subscription.unsubscribe(),this._subscribers.delete(spaceId));const subscription=this._subject.subscribe(observer);this._subscribers.set(spaceId,{observer,subscription})}unsubscribe(spaceId){var _a;this._subscribers.has(spaceId)&&(null===(_a=this._subscribers.get(spaceId))||void 0===_a||_a.subscription.unsubscribe(),this._subscribers.delete(spaceId))}notifyGamepadInput(spaceId,input){var _a;null===(_a=this._subscribers.get(spaceId))||void 0===_a||_a.observer.next(input)}}var DebugPanel_intents=__webpack_require__("aa74"),MicroApps_state=__webpack_require__("0fc2"),ShellShortcut_intents=__webpack_require__("828c"),LayoutType=__webpack_require__("2e22"),Error_state=__webpack_require__("b332"),Input_state=__webpack_require__("82ea");class Input_reducer_InputReducer extends dist_esm["f"]{constructor(_inputAggregator,_gamepadSubject,_logger,_focusSystem,_inputDeviceTypeCalculator,_navigationMethodCalculator){super(),this._inputAggregator=_inputAggregator,this._gamepadSubject=_gamepadSubject,this._logger=_logger,this._focusSystem=_focusSystem,this._inputDeviceTypeCalculator=_inputDeviceTypeCalculator,this._navigationMethodCalculator=_navigationMethodCalculator}async subscribeToGamepadEvents(context,intent){this._gamepadSubject.subscribe(intent.spaceId,intent.callback)}async unsubscribeFromGamepadEvents(context,intent){this._gamepadSubject.unsubscribe(intent.spaceId)}async notifyGamepadConnected(context,intent){if(intent.brand===gamepad_manager_dist_esm["a"].Keyboard)return;const inputState=this.getMutableState(context,Input_state["a"]);inputState.addGamepad(intent.brand),await this.dispatch(context,new Input_intents["l"](intent.brand))}async notifyGamepadDisconnected(context,intent){const inputState=this.getMutableState(context,Input_state["a"]);inputState.removeGamepad(intent.brand);const brand=inputState.lastConnectedGamepad;await this.dispatch(context,new Input_intents["l"](brand))}async notifyGamepadInput(context,intent){const runtimeState=this.getReadOnlyState(context,RuntimeContext_state["a"]);if(!runtimeState.isOverlayVisible)return;this._logger.debug("Gamepad button event received",{intent});const inputEventDeviceType=this.calculateInputDeviceType(context,intent.brand,intent.events);if(await this.dispatch(context,new Input_intents["m"](inputEventDeviceType)),await this.dispatch(context,new Input_intents["l"](intent.brand)),await this.dispatch(context,new DebugPanel_intents["a"](intent.events)),intent.events.some(event=>event.button===gamepad_manager_dist_esm["c"].Y&&[gamepad_manager_dist_esm["b"].ButtonPress,gamepad_manager_dist_esm["b"].ButtonHold].includes(event.type))){const runtimeContextState=this.getReadOnlyState(context,RuntimeContext_state["a"]);if(this.shouldDispatchCloseOverlayOnButtonY(runtimeContextState.platformType,runtimeContextState.isUWP)){const errorState=this.getReadOnlyState(context,Error_state["a"]);return void await this.dispatch(context,new Application_intents["a"](errorState.getShellError()?CloseReason["a"].FatalError:CloseReason["a"].User))}}const microAppState=this.getReadOnlyState(context,MicroApps_state["a"]),defaultPlacement=microAppState.defaultPlacement,focusedMicroApp=runtimeState.focusedMicroApp,otherActiveApps=LayoutType["a"][runtimeState.layoutType].sort((a,b)=>a===defaultPlacement?-1:1).map(placement=>runtimeState.getActiveMicroApp(placement)).filter(app=>(null===focusedMicroApp||void 0===focusedMicroApp?void 0:focusedMicroApp.spaceId)!==(null===app||void 0===app?void 0:app.spaceId)||(null===focusedMicroApp||void 0===focusedMicroApp?void 0:focusedMicroApp.placement)!==(null===app||void 0===app?void 0:app.placement)),activeAppsGlobalEventConfigMap=otherActiveApps.map(app=>({app,buttons:this.getMicroAppButtons(context,!0,app),events:[]})),focusedAppNonGlobalEvents=focusedMicroApp?this.getMicroAppButtons(context,!1,focusedMicroApp):new Set,focusedAppGlobalEventConfig=focusedMicroApp?{app:focusedMicroApp,buttons:this.getMicroAppButtons(context,!0,focusedMicroApp),events:[]}:void 0;focusedMicroApp&&this._gamepadSubject.notifyGamepadInput(focusedMicroApp.spaceId,intent.events);const shellEvents=[];intent.events.forEach(event=>{if(!focusedAppNonGlobalEvents.has(event.button)&&(!focusedAppGlobalEventConfig||!focusedAppGlobalEventConfig.buttons.has(event.button))){for(const globalButtons of activeAppsGlobalEventConfigMap)if(globalButtons.buttons.has(event.button)&&globalButtons.app)return void globalButtons.events.push(event);shellEvents.push(event)}});for(const globalButtons of activeAppsGlobalEventConfigMap)globalButtons.events.length>0&&globalButtons.app&&this._gamepadSubject.notifyGamepadInput(globalButtons.app.spaceId,globalButtons.events);for(const event of shellEvents)this._focusSystem.input(event)}async addMouseOverElementListener(context,intent){this._inputAggregator.addMouseOverElementListener(intent.elementListener)}async removeMouseOverElementListener(context,intent){this._inputAggregator.removeMouseOverElementListener(intent.elementListener)}async addMouseOutElementListener(context,intent){this._inputAggregator.addMouseOutElementListener(intent.elementListener)}async removeMouseOutElementListener(context,intent){this._inputAggregator.removeMouseOutElementListener(intent.elementListener)}calculateInputDeviceType(context,brand,events){if(brand!==gamepad_manager_dist_esm["a"].Keyboard)return InputEventDeviceType.gamepad;const anyButtonsMatch=events.some(event=>ButtonsTreatedAsGamepadInputDeviceTypeWithKeyboard.includes(event.button));if(!anyButtonsMatch){const runtimeState=this.getReadOnlyState(context,RuntimeContext_state["a"]);if(runtimeState.navigationMethod!==shell_sdk_dist_esm["NavigationMethod"].directional)return InputEventDeviceType.keyboard}return InputEventDeviceType.gamepad}shouldDispatchCloseOverlayOnButtonY(platformType,isUWP){return![shell_sdk_dist_esm["PlatformType"].Luna,shell_sdk_dist_esm["PlatformType"].PC].includes(platformType)&&!([shell_sdk_dist_esm["PlatformType"].Scarlett,shell_sdk_dist_esm["PlatformType"].XONE].includes(platformType)&&!isUWP)}getMicroAppButtons(context,handleOnlyGlobalAndHotKeys,microAppConfig){const state=this.getReadOnlyState(context,MicroApps_state["a"]),microAppData=microAppConfig?[state.getMicroAppStateData(microAppConfig)]:state.getAllMicroAppStateData();return new Set(microAppData.reduce((acc,value)=>acc.concat(value.legendItems.filter(x=>!handleOnlyGlobalAndHotKeys||x.isGlobal).map(x=>x.button).concat(value.hotKeys)),[]))}async setInternalFocusChanged(){this._inputAggregator.notifyFocusChange()}async toggleKeyboardAdapter(context,intent){const inputState=this.getMutableState(context,Input_state["a"]);if(inputState.selectedComponentType!==intent.componentType){inputState.selectedComponentType=intent.componentType,this._inputAggregator.notifySelectionChange(intent.componentType);const runtimeContextState=this.getReadOnlyState(context,RuntimeContext_state["a"]);[shell_sdk_dist_esm["PlatformType"].PC,shell_sdk_dist_esm["PlatformType"].Luna].includes(runtimeContextState.platformType)&&await this.dispatch(context,new ShellShortcut_intents["c"]),await this.dispatch(context,new ShellShortcut_intents["a"])}}async updateInputDeviceType(context,intent){const runtimeContextState=this.getMutableState(context,RuntimeContext_state["a"]),inputDeviceType=this._inputDeviceTypeCalculator.calculate(runtimeContextState.platformType,intent.brand);runtimeContextState.inputDeviceType!==inputDeviceType&&(runtimeContextState.inputDeviceType=inputDeviceType,runtimeContextState.platformType===shell_sdk_dist_esm["PlatformType"].PC&&this.dispatch(context,new ShellShortcut_intents["b"]))}async updateNavigationMethod(context,intent){const inputState=this.getReadOnlyState(context,Input_state["a"]);if(inputState.selectedComponentType)return;const runtimeContextState=this.getMutableState(context,RuntimeContext_state["a"]),navigationMethod=this._navigationMethodCalculator.calculate(runtimeContextState.platformType,intent.inputEventDeviceType,runtimeContextState.displayMode);runtimeContextState.navigationMethod!==navigationMethod&&(runtimeContextState.navigationMethod=navigationMethod)}}Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["j"])],Input_reducer_InputReducer.prototype,"subscribeToGamepadEvents",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["k"])],Input_reducer_InputReducer.prototype,"unsubscribeFromGamepadEvents",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["d"])],Input_reducer_InputReducer.prototype,"notifyGamepadConnected",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["e"])],Input_reducer_InputReducer.prototype,"notifyGamepadDisconnected",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["f"])],Input_reducer_InputReducer.prototype,"notifyGamepadInput",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["b"])],Input_reducer_InputReducer.prototype,"addMouseOverElementListener",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["i"])],Input_reducer_InputReducer.prototype,"removeMouseOverElementListener",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["a"])],Input_reducer_InputReducer.prototype,"addMouseOutElementListener",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["h"])],Input_reducer_InputReducer.prototype,"removeMouseOutElementListener",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["g"])],Input_reducer_InputReducer.prototype,"setInternalFocusChanged",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["c"])],Input_reducer_InputReducer.prototype,"toggleKeyboardAdapter",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["l"])],Input_reducer_InputReducer.prototype,"updateInputDeviceType",null),Object(tslib_es6["__decorate"])([Object(dist_esm["a"])(Input_intents["m"])],Input_reducer_InputReducer.prototype,"updateNavigationMethod",null);class InputStoreBundle_InputStoreBundle{static create(inputAggregator,logger,focusSystem){return{reducers:[new Input_reducer_InputReducer(inputAggregator,new GamepadSubject_GamepadSubject(logger),logger,focusSystem,new InputDeviceTypeCalculator_InputDeviceTypeCalculator(logger),new NavigationMethodCalculator_NavigationMethodCalculator(logger))],states:[new Input_state["a"]]}}}var LanguageCode=__webpack_require__("4fb9"),polyfills=__webpack_require__("84df");const defaultLocale={locale:"en-US",language:LanguageCode["a"].English};class LocalizationProvider_LocalizationProvider{constructor(_logger,_httpClient){this._logger=_logger,this._httpClient=_httpClient}getSupportedLocale(locale){const exactLocaleMatch=LanguageCode["b"].get(locale);if(exactLocaleMatch)return exactLocaleMatch;const language=locale.split("-")[0],partialLocaleMatch=LanguageCode["b"].get(language);return partialLocaleMatch||(this._logger.warn("Unsupported language code was provided for localization",{languageCode:language,locale,logCategory:LogCategory["a"].uncategorized}),defaultLocale)}async getMessages(language){return this._httpClient.getJson("localizations/".concat(language,".json"))}async initLocalization(locale){const localizationData=this.getSupportedLocale(locale);Object(polyfills["a"])(localizationData.language),external_commonjs_vue_commonjs2_vue_amd_vue_default.a.setLocale(localizationData.language);try{const messages=await this.getMessages(localizationData.language);messages?external_commonjs_vue_commonjs2_vue_amd_vue_default.a.registerMessages(localizationData.language,messages):this._logger.error("Messages were not provided for language: ".concat(localizationData.language),{logCategory:LogCategory["a"].uncategorized})}catch(e){this._logger.error("Unable to load messages for language: ".concat(localizationData.language),{error:e,logCategory:LogCategory["a"].uncategorized})}return localizationData}}var ApiFactory=__webpack_require__("2d05"),MicroAppLifeGuardFactory=__webpack_require__("ce93"),PSEnterButton=__webpack_require__("8358"),DefaultPcClientInterface=__webpack_require__("dbfd"),PlayStationInterface=__webpack_require__("35e9"),XboxInterface=__webpack_require__("c604"),PlayerNotificationSubject=__webpack_require__("078d"),Economy_service=__webpack_require__("da5b"),Games_service=__webpack_require__("e352"),GlobalStylesService=__webpack_require__("63ad"),MachineIdService=__webpack_require__("aa51"),PlayerNotificationWebSocketService=__webpack_require__("5f57"),LifeGuardService=__webpack_require__("bf9c"),RuntimeRxService=__webpack_require__("7e31"),Api_reducer=__webpack_require__("27b9"),Application_reducer=__webpack_require__("12fe"),Application_state=__webpack_require__("6975"),Authentication_reducer=__webpack_require__("4faf"),Configuration_reducer=__webpack_require__("958f"),DebugPanel_reducer=__webpack_require__("d39f"),DebugPanel_state=__webpack_require__("dae4"),GameInvites_reducer=__webpack_require__("3a45"),Game_reducer=__webpack_require__("58b1"),Game_state=__webpack_require__("69c8"),HotKey_reducer=__webpack_require__("ea5c"),HotKey_state=__webpack_require__("8a7c"),InputLegend_reducer=__webpack_require__("73dc"),InputLegend_state=__webpack_require__("f0cd"),MicroApps_reducer=__webpack_require__("b34e"),NavigationBar_reducer=__webpack_require__("cc58"),NavigationBar_state=__webpack_require__("19c5"),NavigationHistory_reducer=__webpack_require__("0f05a"),NavigationHistory_state=__webpack_require__("6fc2"),PcClientNotification_reducer=__webpack_require__("b0ab"),PcClientNotification_state=__webpack_require__("a690"),PcClientFps_reducer=__webpack_require__("8114"),PcClientFps_state=__webpack_require__("e100"),PcGameSettings_intents=__webpack_require__("e512"),PcGameSettings_reducer=__webpack_require__("883a"),PlayerNotification_reducer=__webpack_require__("0587"),PlayerNotification_state=__webpack_require__("6c08"),Router_reducer=__webpack_require__("6025"),RuntimeContext_reducer=__webpack_require__("c451"),SharePlayMetrics_reducer=__webpack_require__("b722"),SharePlayMetrics_state=__webpack_require__("0202"),ShellFocus_reducer=__webpack_require__("c4f7"),ShellShortcut_reducer=__webpack_require__("a6f5"),ShellShortcut_state=__webpack_require__("55d4"),Streaming_reducer=__webpack_require__("2dfc"),TitleBar_reducer=__webpack_require__("aa26"),OverlayUser_intents=__webpack_require__("d0b5"),OverlayUser_reducer=__webpack_require__("183e"),OverlayUser_state=__webpack_require__("cbb1"),StreamingStatusSubject=__webpack_require__("83e5"),MicroAppDescriptions=__webpack_require__("c386"),Main_view=__webpack_require__("75b0"),Api=__webpack_require__("add3"),Api_intents=__webpack_require__("d9dd");class ChildApi_ChildApi extends Api["a"]{navigate(navigationContext){if(this._appConfig.appName===navigationContext.appName)return super.navigate(navigationContext);const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]);let game;game=void 0!==navigationContext.game?navigationContext.game:runtimeContextState.activeGame;const normalizedNavigationContext={appName:navigationContext.appName,game,applicationData:navigationContext.applicationData};return this.validate(this,"navigate",{navigationContext},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new Api_intents["d"](normalizedNavigationContext))).catch(()=>Promise.resolve(!1))}}var FocusSystemListener=__webpack_require__("fd22");class LocalizationService{translate(key){return this._formatMessage?this._formatMessage({id:key}):key}set formatMessage(value){this._formatMessage=value}}var CacheParamGroup,MobileCompanionAppType=__webpack_require__("0f05"),DesktopAppInterface=__webpack_require__("c61f"),MobileInterface=__webpack_require__("a5c4"),NetworkStatusChangeListener=__webpack_require__("0cac"),XboxNetworkStatusChangeListener=__webpack_require__("7afc"),ServiceWorkerToShellTransportService=__webpack_require__("91bf"),CacheService=__webpack_require__("82aa"),HostFeatureDispatcherService=__webpack_require__("dd03"),FeatureHandlerService=__webpack_require__("1f8e"),HostFeatureConfigurationService=__webpack_require__("1bf6"),HostCommunicationServiceFactory=__webpack_require__("33e9"),TransportServiceFactory=__webpack_require__("61e9"),ErrorMessages=__webpack_require__("faef"),KinderGarden=__webpack_require__("5ffc"),AuthenticationApi_reducer=__webpack_require__("5d8e"),ApplicationList_reducer=__webpack_require__("5a2b"),ApplicationList_state=__webpack_require__("367d"),Configuration_state=__webpack_require__("ac10"),Error_intents=__webpack_require__("f4d0"),Error_reducer=__webpack_require__("0442"),FeatureConfiguration_intents=__webpack_require__("6a96"),FeatureConfiguration_reducer=__webpack_require__("556b"),Layout_intent=__webpack_require__("2373"),Layout_reducer=__webpack_require__("ddc0"),Layout_state=__webpack_require__("e5b5"),ResizeObserver_intent=__webpack_require__("6652"),ResizeObserver_reducer=__webpack_require__("523d"),ResizeObserverService=__webpack_require__("85ca"),ServiceWorker_intents=__webpack_require__("7291"),ServiceWorker_reducer=__webpack_require__("c2e6"),ServiceWorker_state=__webpack_require__("3628"),ShellFocus_state=__webpack_require__("ce13"),TouchGestureHandler_reducer=__webpack_require__("ffa7"),ViewMode_reducer=__webpack_require__("35ad"),ViewMode_state=__webpack_require__("e746"),TouchGestureListener=__webpack_require__("a32a"),ExceptionHandler=__webpack_require__("6755"),HandledError=__webpack_require__("e2c5"),SwitchCrossAndCircleIcons=__webpack_require__("b341");class DesktopAppAuthenticationStrategy_DesktopAppAuthenticationStrategy extends PcClientAuthenticationStrategy_PcClientAuthenticationStrategy{constructor(runtimeParameters,appId,authenticationService,logger,_featureHandlerService){super(runtimeParameters,appId,authenticationService,logger),this._featureHandlerService=_featureHandlerService}isApplicable(){return this._runtimeParameters.platformType===shell_sdk_dist_esm["PlatformType"].PC&&this._runtimeParameters.isStandalone}async authenticate(){return this._runtimeParameters.ticket?super.authenticate():this._authData}shouldCloseOverlay(){return!1}async doPostAuthenticationActions(session){this._featureHandlerService.handleFeature(shell_messages_dist_esm["h"].LoginResult,{session,shouldSendNotification:!0})}}class MobileAuthenticationStrategy_MobileAuthenticationStrategy extends ConsoleAuthenticationStrategy_ConsoleAuthenticationStrategy{constructor(runtimeParameters,appId,logger,_featureHandlerService){super(runtimeParameters,appId,logger),this._featureHandlerService=_featureHandlerService}isApplicable(){return[shell_sdk_dist_esm["PlatformType"].IOS,shell_sdk_dist_esm["PlatformType"].Android,shell_sdk_dist_esm["PlatformType"].Mobile].includes(this._runtimeParameters.platformType)}shouldCloseOverlay(){return this._runtimeParameters.mobileCompanionAppType===MobileCompanionAppType["a"].LegacyCompanionApp}getAuthenticationPlatformType(){return dist["a"].mobile}shouldProcessAuthentication(){return!!this._runtimeParameters.ticket}async doPostAuthenticationActions(session){this._featureHandlerService.handleFeature(shell_messages_dist_esm["h"].LoginResult,{session,shouldSendNotification:this._runtimeParameters.mobileCompanionAppType===MobileCompanionAppType["a"].CompanionApp})}}(function(CacheParamGroup){CacheParamGroup["CacheKillSwitchConfig"]="ubiConnect-configCache"})(CacheParamGroup||(CacheParamGroup={}));class Application_Application{constructor(_logger,_runtimeParameterService,_shellConfig,_httpClient,_ubiServicesFactory,_ubiServices,_versionRedirectionService,_localStorageService){var _a,_b;this._logger=_logger,this._runtimeParameterService=_runtimeParameterService,this._shellConfig=_shellConfig,this._httpClient=_httpClient,this._ubiServicesFactory=_ubiServicesFactory,this._ubiServices=_ubiServices,this._versionRedirectionService=_versionRedirectionService,this._localStorageService=_localStorageService,this._lifeGuardService=new LifeGuardService["a"],external_commonjs_vue_commonjs2_vue_amd_vue_default.a.use(vuex_esm["b"]),this._store=new dist_esm["h"],this._exceptionHandler=new ExceptionHandler["a"](this._logger),this._exceptionHandler.on(HandledError["a"],()=>!0);const runtimeParameters=this._runtimeParameterService.getRuntimeParameters();this._platformType=runtimeParameters.platformType,this._childId=runtimeParameters.childId,this._documentLifecycleListener=new DocumentLifecycleListener,this._kinderGarden=new KinderGarden["a"](this._logger,this._store,this._documentLifecycleListener),this._localizationService=new LocalizationService,this._resizeObserverService=new ResizeObserverService["a"];const transportServiceFactory=new TransportServiceFactory["a"];if(this._transportService=transportServiceFactory.getTransportService(runtimeParameters,_logger),this._transportService){const hostCommunicationServiceFactory=new HostCommunicationServiceFactory["a"];this._hostCommunicationService=hostCommunicationServiceFactory.getHostCommunicationService(runtimeParameters,_logger,this._transportService)}const hostFeatureDispatcherService=new HostFeatureDispatcherService["a"](this._logger);this._featureHandlerService=new FeatureHandlerService["a"](this._store,hostFeatureDispatcherService),this._hostFeatureConfigurationService=new HostFeatureConfigurationService["a"](this._store,this._logger,hostFeatureDispatcherService,this._hostCommunicationService),this._rootElement=document.getElementById("focus-system-root"),this._focusSystem=new focus_system_dist_esm["b"](this._rootElement),this._touchGestureListener=new TouchGestureListener["a"](this._rootElement),this._economyService=new Economy_service["a"](this._shellConfig.shellApplicationId,this._shellConfig.apiBaseUrl,this._httpClient),this._remoteEnvironment=runtimeParameters.apiEnvironment===shell_sdk_dist_esm["Environment"].Cert?"cert2":runtimeParameters.apiEnvironment,this.configureRemoteLogsTransport(),this._appBundleUrlOverrideHelper=new AppBundleUrlOverrideHelper_AppBundleUrlOverrideHelper(runtimeParameters.environment,null===(_a=null===window||void 0===window?void 0:window.location)||void 0===_a?void 0:_a.href),this._isOnTest=new URL(null===(_b=null===window||void 0===window?void 0:window.location)||void 0===_b?void 0:_b.href).pathname.startsWith("/TEST"),this._runtimeRxService=new RuntimeRxService["a"],this._machineIdService=new MachineIdService["a"](this._logger),this._playerNotificationWebSocketService=new PlayerNotificationWebSocketService["a"](this._documentLifecycleListener,this._shellConfig.shellApplicationId,this.getConfigEnvironment(runtimeParameters.apiEnvironment),this._logger),this._playerNotificationService=new esm["l"](this._shellConfig.shellApplicationId,this._httpClient);const shellApplicationConfig={applicationId:this._shellConfig.shellApplicationId,applicationName:this._shellConfig.applicationName,spaceId:this._shellConfig.shellCrossPlaySpaceId,applicationBuildId:"2.24.0"};let trackingServiceLogger;this._trackingService=new tracking_system_dist_esm["a"](shellApplicationConfig,this._httpClient,trackingServiceLogger),this._trackingService.queueOutputConfiguration=this._shellConfig.statisticsConfig,this._remoteLogsQueueInitializer=new RemoteLogsQueueInitializer_RemoteLogsQueueInitializer(this._logger,shellApplicationConfig),this._playerNotificationSubject=new PlayerNotificationSubject["a"](this._logger),this._streamingStatusSubject=new StreamingStatusSubject["a"](this._logger),this._gameInvitesSubject=new GameInvitesSubject_GameInvitesSubject(this._logger);const authenticationStrategies=[new DevAuthenticationStrategy_DevAuthenticationStrategy(this._shellConfig.shellApplicationId,this._ubiServices.authenticationService,this._logger,runtimeParameters)];this._platformInterface=this.createPlatformInterfaceAndFillAuthenticationStrategies(runtimeParameters,authenticationStrategies);const strategy=authenticationStrategies.find(strategy=>strategy.isApplicable());this._authenticationStrategy=null!==strategy&&void 0!==strategy?strategy:new DefaultAuthenticationStrategy_DefaultAuthenticationStrategy(this._logger,runtimeParameters),runtimeParameters.platformType===shell_sdk_dist_esm["PlatformType"].PS4&&runtimeParameters.psEnterButton===PSEnterButton["a"].Circle&&Object(SwitchCrossAndCircleIcons["a"])(),this._cacheService=new CacheService["a"](this._logger)}createPlatformInterfaceAndFillAuthenticationStrategies(runtimeParameters,authenticationStrategies){switch(runtimeParameters.platformType){case shell_sdk_dist_esm["PlatformType"].IOS:case shell_sdk_dist_esm["PlatformType"].Android:case shell_sdk_dist_esm["PlatformType"].Mobile:{const mobileInterface=new MobileInterface["a"](this._logger,this._featureHandlerService);return authenticationStrategies.unshift(new MobileAuthenticationStrategy_MobileAuthenticationStrategy(runtimeParameters,this._shellConfig.shellApplicationId,this._logger,this._featureHandlerService)),authenticationStrategies.unshift(new InGameMobileAuthenticationStrategy_InGameMobileAuthenticationStrategy(runtimeParameters,this._shellConfig.shellApplicationId,this._logger)),mobileInterface}case shell_sdk_dist_esm["PlatformType"].PS4:case shell_sdk_dist_esm["PlatformType"].PS5:return authenticationStrategies.unshift(new PlayStationAuthenticationStrategy_PlayStationAuthenticationStrategy(runtimeParameters,this._shellConfig.shellApplicationId,this._logger)),new PlayStationInterface["a"](this._logger);case shell_sdk_dist_esm["PlatformType"].Scarlett:case shell_sdk_dist_esm["PlatformType"].ScarlettUWP:case shell_sdk_dist_esm["PlatformType"].XONE:{const xboxInterface=new XboxInterface["b"](this._logger,runtimeParameters.hostAppId,this._ubiServices.parametersService,runtimeParameters.isUWP);return authenticationStrategies.unshift(new UWPAuthenticationStrategy_UWPAuthenticationStrategy(runtimeParameters,this._shellConfig.shellApplicationId,this._logger,xboxInterface),new XboxAuthenticationStrategy_XboxAuthenticationStrategy(runtimeParameters,this._shellConfig.shellApplicationId,this._logger)),xboxInterface}case shell_sdk_dist_esm["PlatformType"].PC:return this.createPcPlatformInterfaceAndAuthenticationStrategy(runtimeParameters,authenticationStrategies);case shell_sdk_dist_esm["PlatformType"].Luna:return this.createPcClientPlatformInterfaceAndAuthenticationStrategy(runtimeParameters,authenticationStrategies);default:return this._logger.warn("Platform ".concat(runtimeParameters.platformType," is not fully supported"),{logCategory:LogCategory["a"].uncategorized}),new DefaultPcClientInterface["a"](this._logger,this._featureHandlerService)}}createPcPlatformInterfaceAndAuthenticationStrategy(runtimeParameters,authenticationStrategies){return runtimeParameters.isStandalone||window.native?this.createDesktopAppPlatformInterfaceAndAuthenticationStrategy(runtimeParameters,authenticationStrategies):this.createPcClientPlatformInterfaceAndAuthenticationStrategy(runtimeParameters,authenticationStrategies)}createDesktopAppPlatformInterfaceAndAuthenticationStrategy(runtimeParameters,authenticationStrategies){return authenticationStrategies.unshift(new DesktopAppAuthenticationStrategy_DesktopAppAuthenticationStrategy(runtimeParameters,this._shellConfig.shellApplicationId,this._ubiServices.authenticationService,this._logger,this._featureHandlerService)),new DesktopAppInterface["a"](this._logger,this._store)}createPcClientPlatformInterfaceAndAuthenticationStrategy(runtimeParameters,authenticationStrategies){return authenticationStrategies.unshift(new PcClientAuthenticationStrategy_PcClientAuthenticationStrategy(runtimeParameters,this._shellConfig.shellApplicationId,this._ubiServices.authenticationService,this._logger)),new DefaultPcClientInterface["a"](this._logger,this._featureHandlerService)}configureVue(){external_commonjs_vue_commonjs2_vue_amd_vue_default.a.config.productionTip=!1,external_commonjs_vue_commonjs2_vue_amd_vue_default.a.use(dist_esm["b"]),external_commonjs_vue_commonjs2_vue_amd_vue_default.a.component("upn-icon",lib["e"]);const logger=this._logger;external_commonjs_vue_commonjs2_vue_amd_vue_default.a.use({install(vue){vue.prototype.$logger=logger}});const shellConfig=this._shellConfig;external_commonjs_vue_commonjs2_vue_amd_vue_default.a.mixin({beforeCreate(){this.config=shellConfig}}),external_commonjs_vue_commonjs2_vue_amd_vue_default.a.use(external_commonjs_vue_router_commonjs2_vue_router_amd_vue_router_default.a);const VueIntl=__webpack_require__("dd55");external_commonjs_vue_commonjs2_vue_amd_vue_default.a.use(VueIntl)}initializeStore(store,inputAggregator,remoteLogsQueueInitializer,runtimeParameters,configService,apiFactory,cacheOpaqueResponse,wipeCacheOnVersion){store.initialize([new Application_reducer["a"](this._logger,this._platformInterface,this._trackingService,this._economyService,this._ubiServices.parametersService,this._shellConfig,this._ubiServices.populationsService,this._featureHandlerService),new MicroApps_reducer["a"](this._logger,this._lifeGuardService,this._localStorageService,this._ubiServices.ipLocationService,configService,this._appBundleUrlOverrideHelper),new Api_reducer["a"](this._logger,this._ubiServicesFactory,this._trackingService,this._lifeGuardService,this._platformInterface,this._featureHandlerService,this._cacheService),new AuthenticationApi_reducer["a"](this._logger,this._runtimeParameterService,this._versionRedirectionService,this._localStorageService,this._featureHandlerService),new Authentication_reducer["a"](this._logger,this._ubiServices.authenticationService,this._shellConfig),new Router_reducer["a"](this._logger,runtimeParameters,this._trackingService,this._lifeGuardService,this._featureHandlerService,this._kinderGarden),new Configuration_reducer["a"](this._logger,this._appBundleUrlOverrideHelper,configService,this._lifeGuardService,this._featureHandlerService),new RuntimeContext_reducer["a"](this._logger,this._runtimeRxService,remoteLogsQueueInitializer,this._trackingService,this._authenticationStrategy,this._documentLifecycleListener,this._hostCommunicationService),new NavigationHistory_reducer["a"],new ShellFocus_reducer["a"](this._logger,this._focusSystem),new ShellShortcut_reducer["a"](this._focusSystem,this._localizationService),new TitleBar_reducer["a"](this._featureHandlerService),new InputLegend_reducer["a"],new HotKey_reducer["a"],new PlayerNotification_reducer["a"](this._playerNotificationSubject,this._logger,this._playerNotificationWebSocketService),new Streaming_reducer["a"](this._featureHandlerService,this._streamingStatusSubject),new GameInvites_reducer["a"](this._gameInvitesSubject,this._featureHandlerService),new Game_reducer["a"](this._logger,this._ubiServices.gamesPlayedService,new Games_service["a"](this._shellConfig.shellApplicationId,this._shellConfig.apiBaseUrl,this._httpClient)),new DebugPanel_reducer["a"],new PcClientNotification_reducer["a"](this._logger,this._featureHandlerService),new PcClientFps_reducer["a"],new SharePlayMetrics_reducer["a"](this._shellConfig.avatarBaseUrl),new PcGameSettings_reducer["a"](this._featureHandlerService),new OverlayUser_reducer["a"](this._featureHandlerService),new Error_reducer["a"](this._logger),new NavigationBar_reducer["a"],new FeatureConfiguration_reducer["a"](this._logger,this._hostFeatureConfigurationService,this._featureHandlerService),new ServiceWorker_reducer["a"](this._logger,new shell_messages_dist_esm["lb"](this._logger,new ServiceWorkerToShellTransportService["a"](this._logger,runtimeParameters)),this._httpClient,this._localStorageService),new ViewMode_reducer["a"](this._featureHandlerService),new ApplicationList_reducer["a"],new TouchGestureHandler_reducer["a"](this._touchGestureListener),new Layout_reducer["a"],new ResizeObserver_reducer["a"](this._resizeObserverService)],[new Application_state["a"](this._shellConfig.shellApplicationId,this._shellConfig.avatarBaseUrl),new DebugPanel_state["a"](runtimeParameters.fullUrl),new MicroApps_state["a"](apiFactory),new InputLegend_state["a"],new HotKey_state["a"],this.createRuntimeContextState(runtimeParameters),new NavigationHistory_state["a"],new PlayerNotification_state["a"](this._shellConfig.shellCrossPlaySpaceId),new Game_state["a"],new ShellShortcut_state["a"],new PcClientNotification_state["a"],new PcClientFps_state["a"],new SharePlayMetrics_state["a"],new OverlayUser_state["a"],new Configuration_state["a"],new Error_state["a"],new NavigationBar_state["a"],new ApplicationList_state["a"],new ServiceWorker_state["a"](runtimeParameters,cacheOpaqueResponse,wipeCacheOnVersion),new ShellFocus_state["a"],new ViewMode_state["a"],new Layout_state["a"]],[InputStoreBundle_InputStoreBundle.create(inputAggregator,this._logger,this._focusSystem)])}createRuntimeContextState(runtimeParameters){const inputDeviceType=new InputDeviceTypeCalculator_InputDeviceTypeCalculator(this._logger).calculate(this._platformType),navigationMethod=new NavigationMethodCalculator_NavigationMethodCalculator(this._logger).calculate(this._platformType);return new RuntimeContext_state["a"](runtimeParameters,inputDeviceType,navigationMethod)}async dispatchInitialIntents(store,runtimeParameters){var _a;const{configurationCorrupted,debug,platformType,isStandalone}=runtimeParameters,isPcClientCommunicationServiceAvailable=this._hostCommunicationService&&(platformType===shell_sdk_dist_esm["PlatformType"].Luna||platformType===shell_sdk_dist_esm["PlatformType"].PC&&!isStandalone&&!window.native);if(isPcClientCommunicationServiceAvailable?await store.dispatchIntent(new Application_intents["a"](CloseReason["a"].User,!1)):await store.dispatchIntent(new RuntimeContext_intents["f"]),await store.dispatchIntent(new ServiceWorker_intents["c"]),debug&&store.dispatchIntent(new DebugPanel_intents["b"](!0)),this._childId){if(window.opener)return void this._kinderGarden.registerSelfAsChild(this._childId);this._logger.error(ErrorMessages["a"].NoParentWindow,{childId:this._childId}),window.close()}else this._kinderGarden.registerSelfAsHost();if(configurationCorrupted)store.dispatchIntent(new Error_intents["b"]({message:"error.generic"}));else{await store.dispatchIntent(new FeatureConfiguration_intents["a"]);const postAuthAction=await this._authenticationStrategy.processAuthentication();if(postAuthAction instanceof Router_intents["c"]){const authSession=null===(_a=postAuthAction.authData)||void 0===_a?void 0:_a.session;authSession&&authSession.sessionId&&await store.dispatchIntent(new RuntimeContext_intents["a"](authSession))}await store.dispatchIntent(postAuthAction),isPcClientCommunicationServiceAvailable&&(store.dispatchIntent(new PcGameSettings_intents["a"]),store.dispatchIntent(new OverlayUser_intents["a"]),store.dispatchIntent(new Application_intents["g"]))}}async getCacheConfiguration(){try{const configParametersResponse=await Object(AsyncDelay["b"])(Timeouts["a"],this._ubiServices.parametersService.v1.getSpaceParameters(null,null,this._shellConfig.shellCrossPlaySpaceId,[],[CacheParamGroup.CacheKillSwitchConfig]));return configParametersResponse.parameters[CacheParamGroup.CacheKillSwitchConfig].fields}catch(e){this._logger.error("Fail to query configuration service configuration",{error:e,logCategory:LogCategory["a"].configuration})}return{applicationsConfigurationUrls:[],authenticationConfigurationUrls:[],useConfigService:!1,noServiceWorker:!1,wipeCacheData:!1,wipeCacheOnVersion:"",cacheOpaqueResponse:!1}}async start(){const runtimeParameters=this._runtimeParameterService.getRuntimeParameters();MicroAppDescriptions["a"].initialize(this._lifeGuardService),this.configureVue();const cacheConfiguration=await this.getCacheConfiguration();this._shellConfigService=new client["d"](this._httpClient,this._shellConfig.shellCrossPlaySpaceId,this._shellConfig.shellApplicationId,this.getConfigEnvironment(runtimeParameters.environment),this.getConfigEnvironment(runtimeParameters.environment,this._isOnTest,runtimeParameters.configEnvironment),cacheConfiguration.authenticationConfigurationUrls,cacheConfiguration.applicationsConfigurationUrls),void 0===runtimeParameters.noServiceWorker&&(runtimeParameters.noServiceWorker=cacheConfiguration.noServiceWorker),void 0===runtimeParameters.wipeCacheData&&(runtimeParameters.wipeCacheData=cacheConfiguration.wipeCacheData),cacheConfiguration.cacheOpaqueResponse||(cacheConfiguration.cacheOpaqueResponse=!1),void 0!==runtimeParameters.cacheOpaqueRequests&&(cacheConfiguration.cacheOpaqueResponse=runtimeParameters.cacheOpaqueRequests);try{const localizationProvider=new LocalizationProvider_LocalizationProvider(this._logger,this._httpClient),localizationData=await Object(AsyncDelay["b"])(Timeouts["a"],localizationProvider.initLocalization(runtimeParameters.playerLocale));runtimeParameters.playerLocale=localizationData.locale}catch(e){return void this._logger.error("Fail to load localization",{error:e,logCategory:LogCategory["a"].uncategorized})}const apiFactory=new ApiFactory["a"](this._childId?ChildApi_ChildApi:Api["a"]),inputAggregator=new InputAggregator_InputAggregator(runtimeParameters.platformType,this._logger,this._store);this.initializeStore(this._store,inputAggregator,this._remoteLogsQueueInitializer,runtimeParameters,this._shellConfigService,apiFactory,cacheConfiguration.cacheOpaqueResponse,cacheConfiguration.wipeCacheOnVersion),inputAggregator.start(),await this.mountMainView(this._store,inputAggregator),this._lifeGuardService.lifeGuardFactory=new MicroAppLifeGuardFactory["a"](this._store,this._logger,apiFactory,this._featureHandlerService,this._hostCommunicationService),this._store.watchState(RuntimeContext_state["a"],"runtimeContext",runtimeContext=>{this._runtimeRxService.notifyRuntimeContextUpdate(runtimeContext)}),this.initializeGlobalStylesService(this._store,runtimeParameters),await this.configureTrackingService(),[shell_sdk_dist_esm["PlatformType"].XONE,shell_sdk_dist_esm["PlatformType"].Scarlett,shell_sdk_dist_esm["PlatformType"].ScarlettUWP].includes(runtimeParameters.platformType)&&!0===runtimeParameters.isUWP?this.initializeXboxSpecificListeners(this._store):runtimeParameters.mobileCompanionAppType!==MobileCompanionAppType["a"].CompanionApp&&new NetworkStatusChangeListener["a"](this._store),await this.dispatchInitialIntents(this._store,runtimeParameters)}async configureTrackingService(){const launchRuntimeParameters=this._runtimeParameterService.getRuntimeParameters(),machineId=await this._machineIdService.getMachineId();let context,targetGameAppId;const trackingConfiguration={default:(event,appConfig)=>{const data={deviceType:launchRuntimeParameters.deviceType,platformType:launchRuntimeParameters.platformType,country:context.playerSession.clientIpCountry,shellSessionId:context.playerSession.sessionId,ubisoftAccountId:context.playerSession.userId,gameSpaceId:context.hostGame.spaceId,gameSessionId:this._runtimeParameterService.getRuntimeParameters().gameSessionId,approximateServerDate:this._trackingService.getServerDate(event.date),version:appConfig.applicationBuildId,seqId:event.data.seqId};return this._childId&&(data.isChildWindow=!0),data},shellStart:()=>({machineId,launchMicroApp:launchRuntimeParameters.microApp,launchParams:launchRuntimeParameters.microAppParams}),shellQuit:()=>({machineId}),shellNav:()=>({inputDeviceBrand:context.inputDeviceType,inputDeviceType:context.inputDeviceType===shell_sdk_dist_esm["InputDeviceType"].keyboard?"KEYBOARD":"GAMEPAD"}),"applications.registerActivity":()=>({clientCountryCode:context.playerSession.clientIpCountry}),authNav:()=>({gameAppId:context.hostGame.applicationId}),statsNav:()=>({targetGameAppId}),gamePageNav:()=>({targetGameAppId}),microAppNav:(_,appConfig)=>{var _a;return appConfig.applicationName===MicroAppNames["a"].AppGamePage?{targetGameAppId:null===(_a=context.activeGame)||void 0===_a?void 0:_a.applicationId}:{}},challengeDisplayed:()=>({targetGameAppId}),challengesNav:()=>({targetGameAppId}),rewardDisplayed:()=>({targetGameAppId}),rewardDetailOpen:()=>({targetGameAppId}),rewardsNav:()=>({targetGameAppId}),rewardUserAction:()=>({targetGameAppId}),friendAction:(_,appConfig)=>({inputSource:appConfig.applicationName}),groupAction:(_,appConfig)=>({inputSource:appConfig.applicationName})},outputConfiguration={outputUrl:this._shellConfig.apiBaseUrl+"/v3/profiles/me/events",request:()=>({session:context.playerSession})};this._runtimeRxService.subscribe({next:value=>{var _a,_b;context=value,!this._trackingService.isInitialized&&context.playerSession&&(this._trackingService.trackingConfiguration=trackingConfiguration,this._trackingService.outputConfiguration=outputConfiguration,this._childId||this._trackingService.initialize()),targetGameAppId!==(null===(_a=context.activeGame)||void 0===_a?void 0:_a.applicationId)&&(targetGameAppId=null===(_b=context.activeGame)||void 0===_b?void 0:_b.applicationId)}})}configureRemoteLogsTransport(){const remoteLogsTransport=this._logger.getDefaultTransport(logging_system_dist_esm["f"]),batchSize=this._shellConfig.loggerConfig.batchSize,interval=this._shellConfig.loggerConfig.timeInterval,{config}=remoteLogsTransport;config.httpClient=this._httpClient,config.environment=this._remoteEnvironment,config.endpoint=this._shellConfig.apiBaseUrl,config.queueLimitCount=batchSize,config.outputInterval=interval}initializeGlobalStylesService(store,runtimeParameters){this._globalStylesService=new GlobalStylesService["a"](this._logger,runtimeParameters,store)}async mountMainView(store,inputAggregator){let resolver;const waitingForMicroAppContainerPromise=new Promise((resolve,reject)=>{resolver=resolve}),unwatch=store.watchState(Application_state["a"],"isLayoutMounted",microAppContainer=>{microAppContainer&&resolver&&(resolver(),resolver=void 0,unwatch())}),focusSystemListener=new FocusSystemListener["a"](this._rootElement,store),application=new external_commonjs_vue_commonjs2_vue_amd_vue_default.a({el:"#app",render:h=>h(Main_view["a"]),store,provide:{$focusSystem:this._focusSystem},beforeDestroy:()=>{focusSystemListener.dispose(),inputAggregator.dispose(),this._touchGestureListener.dispose(),this._resizeObserverService.disconnect()}});return this._localizationService.formatMessage=application.$formatMessage,await store.dispatchIntent(new ShellShortcut_intents["c"]),this.observeResizeOnShellContainer(store),waitingForMicroAppContainerPromise}observeResizeOnShellContainer(store){store.dispatchIntent(new ResizeObserver_intent["b"](result=>{store.dispatchIntent(new Layout_intent["a"](result.breakpoint))}))}getConfigEnvironment(env,isOnTest=!1,configEnv){return configEnv?environmentToConfigEnvironmentMap[configEnv]:isOnTest?client["a"].Test:environmentToConfigEnvironmentMap[env]}initializeXboxSpecificListeners(store){new XboxNetworkStatusChangeListener["a"](store)}}const environmentToConfigEnvironmentMap={[shell_sdk_dist_esm["Environment"].Local]:client["a"].Local,[shell_sdk_dist_esm["Environment"].Dev]:client["a"].Dev,[shell_sdk_dist_esm["Environment"].Uat]:client["a"].Uat,[shell_sdk_dist_esm["Environment"].Cert]:client["a"].Cert,[shell_sdk_dist_esm["Environment"].Prod]:client["a"].Prod}},"6c94":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return PersistentAuthenticationRedirectData}));const authenticationRedirectDataLocalStorageKey="shell-authentication-redirect-data",callbackParameterNameLocalStorageKey="shell-authentication-callback-parameter",multipleCallbackParametersNameLocalStorageKey="shell-authentication-multiple-callback-parameters";class PersistentAuthenticationRedirectData{constructor(_localStorageService){this._localStorageService=_localStorageService}saveAuthenticationData(data,callbackParameterName,multipleParametersNames){this._localStorageService.setObjectSync(authenticationRedirectDataLocalStorageKey,data),callbackParameterName?(this._localStorageService.setValue(callbackParameterNameLocalStorageKey,callbackParameterName),this._localStorageService.deleteValue(multipleCallbackParametersNameLocalStorageKey)):multipleParametersNames&&(this._localStorageService.setObjectSync(multipleCallbackParametersNameLocalStorageKey,multipleParametersNames),this._localStorageService.deleteValue(callbackParameterNameLocalStorageKey))}retrieveAuthenticationRedirectData(){const data=this._localStorageService.getObject(authenticationRedirectDataLocalStorageKey);return data&&this._localStorageService.deleteValue(authenticationRedirectDataLocalStorageKey),data}peekCallbackParameterValue(location){return this.retrieveCallbackParameterValue(location,!0)}retrieveCallbackParameterValue(location,peek=!1){const callbackParameterName=this._localStorageService.getValue(callbackParameterNameLocalStorageKey);if(callbackParameterName){peek||this._localStorageService.deleteValue(callbackParameterNameLocalStorageKey);const url=new URL(location.href),parameterValue=url.searchParams.get(callbackParameterName);if(parameterValue)return parameterValue}}peekMultipleCallbackParametersValues(location){return this.retrieveMultipleCallbackParametersValues(location,!0)}retrieveMultipleCallbackParametersValues(location,peek=!1){const callBackNames=this._localStorageService.getObject(multipleCallbackParametersNameLocalStorageKey);if(callBackNames){const returnValue={},url=new URL(location.href);return callBackNames.forEach(parameterName=>{const parameterValue=url.searchParams.get(parameterName);null!==parameterValue&&void 0!==parameterValue&&(returnValue[parameterName]=parameterValue)}),peek||this._localStorageService.deleteValue(multipleCallbackParametersNameLocalStorageKey),returnValue}}}},"82ea":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return InputState}));var tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("9ab4"),_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("85f0");class InputState extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_1__["g"])("Input State")){constructor(){super(...arguments),this._connectedGamepads=[],this._selectedComponentType=null}addGamepad(brand){this._connectedGamepads.push(brand)}get lastConnectedGamepad(){var _a;return null!==(_a=this._connectedGamepads[this._connectedGamepads.length-1])&&void 0!==_a?_a:null}removeGamepad(brand){const index=this._connectedGamepads.indexOf(brand);index>=0&&this._connectedGamepads.splice(index,1)}get selectedComponentType(){return this._selectedComponentType}set selectedComponentType(value){this._selectedComponentType=value}}Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_1__["e"]],InputState.prototype,"addGamepad",null),Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_1__["e"]],InputState.prototype,"removeGamepad",null)},"9bfe":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return getRendererDpiFromJS})),__webpack_require__.d(__webpack_exports__,"a",(function(){return getRendererDpiFromCSS}));var _models_PixelDensity__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("04bd"),_utils_CssUtils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("4c6e");function getRendererDpiFromJS(){return window.devicePixelRatio*_models_PixelDensity__WEBPACK_IMPORTED_MODULE_0__["a"].Standard}function getRendererDpiFromCSS(){let dpi=0,lowerEdge=1,upperEdge=1;const maximumDpiThreshold=5e3;for(;upperEdge<maximumDpiThreshold;upperEdge*=2)if(Object(_utils_CssUtils__WEBPACK_IMPORTED_MODULE_1__["c"])(upperEdge)){lowerEdge=upperEdge/2;break}const highestPixelDensity=Object.values(_models_PixelDensity__WEBPACK_IMPORTED_MODULE_0__["a"]).sort((a,b)=>b-a)[0];for(let i=0;i<2*highestPixelDensity;i++){const distanceBetweenLowerAndUpperEdges=upperEdge-lowerEdge;if(distanceBetweenLowerAndUpperEdges<1)break;const halfWay=lowerEdge+distanceBetweenLowerAndUpperEdges/2;if(Object(_utils_CssUtils__WEBPACK_IMPORTED_MODULE_1__["a"])(halfWay)){dpi=halfWay;break}Object(_utils_CssUtils__WEBPACK_IMPORTED_MODULE_1__["b"])(halfWay)?lowerEdge=halfWay:upperEdge=halfWay}return dpi}},a109:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"j",(function(){return SubscribeToGamepadEventsIntent})),__webpack_require__.d(__webpack_exports__,"k",(function(){return UnsubscribeFromGamepadEventsIntent})),__webpack_require__.d(__webpack_exports__,"d",(function(){return NotifyGamepadConnectedIntent})),__webpack_require__.d(__webpack_exports__,"e",(function(){return NotifyGamepadDisconnectedIntent})),__webpack_require__.d(__webpack_exports__,"f",(function(){return NotifyGamepadInputIntent})),__webpack_require__.d(__webpack_exports__,"g",(function(){return NotifyInternalFocusChangedIntent})),__webpack_require__.d(__webpack_exports__,"c",(function(){return NotifyComponentIsSelectedIntent})),__webpack_require__.d(__webpack_exports__,"l",(function(){return UpdateInputDeviceTypeIntent})),__webpack_require__.d(__webpack_exports__,"m",(function(){return UpdateNavigationMethodIntent})),__webpack_require__.d(__webpack_exports__,"b",(function(){return AddMouseOverElementListenerIntent})),__webpack_require__.d(__webpack_exports__,"i",(function(){return RemoveMouseOverElementListenerIntent})),__webpack_require__.d(__webpack_exports__,"a",(function(){return AddMouseOutElementListenerIntent})),__webpack_require__.d(__webpack_exports__,"h",(function(){return RemoveMouseOutElementListenerIntent}));var _upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("85f0");class SubscribeToGamepadEventsIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Subscribe to Gamepad Events")){constructor(spaceId,callback){super(),this.spaceId=spaceId,this.callback=callback}}class UnsubscribeFromGamepadEventsIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Unsubscribe from Gamepad Events")){constructor(spaceId){super(),this.spaceId=spaceId}}class NotifyGamepadConnectedIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Notify Gamepad Connected")){constructor(brand){super(),this.brand=brand}}class NotifyGamepadDisconnectedIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Notify Gamepad Disconnected")){constructor(brand){super(),this.brand=brand}}class NotifyGamepadInputIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Notify Gamepad Input")){constructor(brand,events){super(),this.brand=brand,this.events=events}}class NotifyInternalFocusChangedIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Notify Internal Focus Changed")){}class NotifyComponentIsSelectedIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Notify Component Is Selected")){constructor(componentType){super(),this.componentType=componentType}}class UpdateInputDeviceTypeIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Update input device type")){constructor(brand){super(),this.brand=brand}}class UpdateNavigationMethodIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Update navigation method")){constructor(inputEventDeviceType){super(),this.inputEventDeviceType=inputEventDeviceType}}class AddMouseOverElementListenerIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Add Mouse Over Element Listener")){constructor(elementListener){super(),this.elementListener=elementListener}}class RemoveMouseOverElementListenerIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Remove Mouse Over Element Listener")){constructor(elementListener){super(),this.elementListener=elementListener}}class AddMouseOutElementListenerIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Add Mouse Out Element Listener")){constructor(elementListener){super(),this.elementListener=elementListener}}class RemoveMouseOutElementListenerIntent extends(Object(_upc_vuex_extensions__WEBPACK_IMPORTED_MODULE_0__["c"])("[Shell] Remove Mouse Out Element Listener")){constructor(elementListener){super(),this.elementListener=elementListener}}},ad7e:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return ShellToDesktopAppTransportService}));var _upn_shell_messages__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("f350");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}class ShellToDesktopAppTransportService extends _upn_shell_messages__WEBPACK_IMPORTED_MODULE_0__["mb"]{constructor(){if(super(),window.desktopAppBridge){const desktopAppBridge=_objectSpread({},window.desktopAppBridge);delete desktopAppBridge["initBridge"],window.bridge=_objectSpread(_objectSpread({},window.bridge),desktopAppBridge),window.desktopAppBridge.initBridge&&window.desktopAppBridge.initBridge(window.bridge)}}}},add3:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Api_Api}));var tslib_es6=__webpack_require__("9ab4"),esm=__webpack_require__("ca76"),dist_esm=__webpack_require__("0829"),LogCategory=__webpack_require__("3f4f"),Profixy=__webpack_require__("5f6d"),Input_intents=__webpack_require__("a109"),NavigationDirection=__webpack_require__("ab39"),Api_intents=__webpack_require__("d9dd"),GameInvites_intents=__webpack_require__("a581"),HotKey_intent=__webpack_require__("3939"),InputLegend_intent=__webpack_require__("1299"),NavigationHistory_intent=__webpack_require__("7783"),PlayerNotification_intents=__webpack_require__("9353"),Router_intents=__webpack_require__("a76b"),RuntimeContext_intents=__webpack_require__("35d6"),RuntimeContext_state=__webpack_require__("b193"),Streaming_intents=__webpack_require__("b9c5"),TitleBar_intent=__webpack_require__("7aa4"),ViewMode_intents=__webpack_require__("7d93"),ServiceWorker_intents=__webpack_require__("7291"),HandledError=__webpack_require__("e2c5"),ShellFocus_state=__webpack_require__("ce13");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}class ApiValidationService_ApiValidationService{constructor(_appConfig,_logger,_store){this._appConfig=_appConfig,this._logger=_logger,this._store=_store}async validate(disposable,methodName,args,validators){await Promise.all(validators.map(validator=>validator(disposable,methodName,args)))}async validateDispose(disposable,methodName,data){if(data=_objectSpread({appConfig:this._appConfig},data),this._logger.debug(methodName,{data,logCategory:LogCategory["a"].api}),disposable.disposed())return this._logger.error(methodName+" call after dispose",{data,logCategory:LogCategory["a"].api}),Promise.reject("Object disposed")}async validateMicroAppActive(disposable,methodName,data){var _a,_b;const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]);if(![null===(_a=runtimeContextState.getActiveMicroApp(this._appConfig.placement))||void 0===_a?void 0:_a.appName,null===(_b=runtimeContextState.getActivatingMicroApp(this._appConfig.placement))||void 0===_b?void 0:_b.appName].includes(this._appConfig.appName))return this._logger.error("".concat(this._appConfig.appName," called ").concat(methodName," when deactivated"),{data,logCategory:LogCategory["a"].api}),Promise.reject("Microapp inactive")}async validateContainerNavigationNotInProgress(disposable,methodName,data){const focusState=this._store.getReadonlyState(ShellFocus_state["a"]);if(focusState.isContainerNavigationInProgress)return this._logger.warn("".concat(this._appConfig.appName," called ").concat(methodName," when another container navigation"),{data,logCategory:LogCategory["a"].api}),Promise.reject("Container navigation is in progress")}}var shell_sdk_dist_esm=__webpack_require__("0f0f");class CacheApiImplementation{constructor(store,appConfig){this.v1=new CacheApi_CacheApiV1Implementation(store,appConfig)}}class CacheApi_CacheApiV1Implementation{constructor(store,appConfig){this._store=store,this._appConfig=appConfig}async getCache(ctor,type=shell_sdk_dist_esm["CacheType"].ApolloV3,shared=!1){return this._store.dispatchIntent(new Api_intents["a"](ctor,this._appConfig,type,shared))}}class GameInvitesApiImplementation{constructor(store,appConfig){this.v1=new GameInvitesApi_GameInvitesApiV1Implementation(store,appConfig)}}class GameInvitesApi_GameInvitesApiV1Implementation{constructor(store,appConfig){this._store=store,this._appConfig=appConfig}sendGameInvite(profileId,gameId,gameSessionReference){return this._store.dispatchIntent(new GameInvites_intents["h"](profileId,gameId,gameSessionReference))}sendChannelGameInvite(channelId,gameId,gameSessionReference){return this._store.dispatchIntent(new GameInvites_intents["g"](channelId,gameId,gameSessionReference))}acceptGameInvite(profileId,gameId,gameSessionReference){return this._store.dispatchIntent(new GameInvites_intents["a"](profileId,gameId,gameSessionReference))}declineGameInvite(profileId,gameId,gameSessionReference){return this._store.dispatchIntent(new GameInvites_intents["b"](profileId,gameId,gameSessionReference))}getCurrentGameInvites(){return this._store.dispatchIntent(new GameInvites_intents["c"])}observeGameInvites(callback){return this._store.dispatchIntent(new GameInvites_intents["i"](this._appConfig.spaceId,callback))}joinGame(profileId,gameId,gameSessionReference){return this._store.dispatchIntent(new GameInvites_intents["d"](profileId,gameId,gameSessionReference))}}class StreamingApiImplementation{constructor(store,appConfig){this.v1=new StreamingApiV1Implementation(store,appConfig)}}class StreamingApiV1Implementation{constructor(store,appConfig){this.host=new StreamingApi_StreamingHostApiV1Implementation(store,appConfig)}}class StreamingApi_StreamingHostApiV1Implementation{constructor(_store,_appConfig){this._store=_store,this._appConfig=_appConfig}async start(){return this._store.dispatchIntent(new Streaming_intents["c"])}async getStreamingStatusUpdate(){return this._store.dispatchIntent(new Streaming_intents["a"])}async observeStreamingStatusUpdate(callback){return this._store.dispatchIntent(new Streaming_intents["d"](this._appConfig.spaceId,callback))}}var ResizeObserver_intent=__webpack_require__("6652"),ViewMode_state=__webpack_require__("e746");class ViewModeApiImplementation{constructor(store,apiValidatorService,appConfig){this._disposed=!1,this.v1=new ViewModeApi_ViewModeApiV1Implementation(store,apiValidatorService,appConfig)}dispose(){this._disposed=!0,this.v1.dispose()}disposed(){return this._disposed}}class ViewModeApi_ViewModeApiV1Implementation{constructor(_store,_apiValidatorService,_appConfig){this._store=_store,this._apiValidatorService=_apiValidatorService,this._appConfig=_appConfig,this._disposed=!1}dispose(){this._disposed=!0}disposed(){return this._disposed}getMicroAppViewMode(){const viewModeState=this._store.getReadonlyState(ViewMode_state["a"]);return Promise.resolve(viewModeState.viewportMode)}async updateMicroAppViewMode(mode){return await this._apiValidatorService.validate(this,"updateMicroAppViewMode",{mode},[this._apiValidatorService.validateDispose.bind(this._apiValidatorService),this._apiValidatorService.validateMicroAppActive.bind(this._apiValidatorService)]),this._store.dispatchIntent(new ViewMode_intents["c"](mode))}getNavigationBarViewMode(){const navigationBarViewMode=this._store.getReadonlyState(ViewMode_state["a"]);return Promise.resolve(navigationBarViewMode.navigationBarViewMode)}async updateNavigationBarViewMode(mode){return await this._apiValidatorService.validate(this,"updateNavigationBarVisibility",{mode},[this._apiValidatorService.validateDispose.bind(this._apiValidatorService),(disposable,methodName,data)=>this._apiValidatorService.validateMicroAppActive(disposable,methodName,data)]),this._store.dispatchIntent(new ViewMode_intents["b"](mode))}async observeResizeOnMicroAppContainer(callback){return await this._apiValidatorService.validate(this,"observeResizeOnMicroAppContainer",{callback},[this._apiValidatorService.validateDispose.bind(this._apiValidatorService),this._apiValidatorService.validateMicroAppActive.bind(this._apiValidatorService)]),this._store.dispatchIntent(new ResizeObserver_intent["a"](this._appConfig,callback))}async unobserveResizeOnMicroAppContainer(){return await this._apiValidatorService.validate(this,"unobserveResizeOnMicroAppContainer",{},[this._apiValidatorService.validateDispose.bind(this._apiValidatorService),this._apiValidatorService.validateMicroAppActive.bind(this._apiValidatorService)]),this._store.dispatchIntent(new ResizeObserver_intent["c"](this._appConfig))}}class Api_Api{constructor(_store,_appConfig,_logger,_pcClientWrapper,_apiValidationService=new ApiValidationService_ApiValidationService(_appConfig,_logger,_store)){this._store=_store,this._appConfig=_appConfig,this._logger=_logger,this._pcClientWrapper=_pcClientWrapper,this._apiValidationService=_apiValidationService,this._observers=[],this._ubiServices=null,this._unusedGameSessionId="unused",this._disposed=!1,this._pcClientWrapper&&(this._pcClientProxy=Profixy["a"].new(this._pcClientWrapper)),this._gameInvitesProxy=Profixy["a"].new(new GameInvitesApiImplementation(_store,_appConfig)),this._streamingProxy=Profixy["a"].new(new StreamingApiImplementation(_store,_appConfig)),this._cachesApiProxy=Profixy["a"].new(new CacheApiImplementation(_store,_appConfig));const viewModeApi=new ViewModeApiImplementation(_store,this._apiValidationService,_appConfig);this._viewModeProxy=Profixy["a"].new(viewModeApi)}disposed(){return this._disposed}async addCachingEntries(definitions){return this.validate(this,"addCachingEntries",{definitions},this.validateDispose).then(()=>this._store.dispatchIntent(new ServiceWorker_intents["e"](definitions)))}async removeCachingEntries(definitions){return this.validate(this,"removeCachingEntries",{definitions},this.validateDispose).then(()=>this._store.dispatchIntent(new ServiceWorker_intents["f"](definitions)))}set applicationId(value){this._applicationId=value}set applicationBuildId(value){this._applicationBuildId=value}getLogger(){if(this._applicationLogger)return Promise.resolve(this._applicationLogger);const{applicationName,applicationId}=this.applicationConfig,{context}=this._logger.settings,settings={logSource:applicationName,logCategory:LogCategory["a"].uncategorized};context&&(settings.context=context),this._applicationLogger=this._logger.createApplicationLogger(applicationName,applicationId,settings);const remoteLogsTransport=this._logger.getDefaultTransport(dist_esm["f"]),queue=remoteLogsTransport.createQueue(applicationId);return queue.shouldFetchOutputParameters=!0,queue.applicationConfig=this.applicationConfig,Promise.resolve(this._applicationLogger)}navigate(navigationContext){const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]);let game;game=void 0!==navigationContext.game?navigationContext.game:runtimeContextState.activeGame;const normalizedNavigationContext={appName:navigationContext.appName,game,applicationData:navigationContext.applicationData};return this.validate(this,"navigate",{navigationContext},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new Api_intents["c"](normalizedNavigationContext,NavigationDirection["a"].forwards,this._appConfig))).catch(()=>Promise.resolve(!1))}navigateBack(){return this.validate(this,"navigateBack",{},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new Router_intents["b"](this._appConfig.placement)))}addToNavigationHistory(historyEntry){return this.validate(this,"addToNavigationHistory",{historyEntry},this.validateDispose,this.validateMicroAppActive).then(()=>{const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]),navigationContext={appName:this._appConfig.appName,game:runtimeContextState.activeGame,applicationData:historyEntry.applicationData};return this._store.dispatchIntent(new NavigationHistory_intent["d"](this._appConfig,navigationContext))})}pushToNavigationHistory(applicationData){return this.validate(this,"pushNavigationHistoryState",{applicationData},this.validateDispose,this.validateMicroAppActive).then(()=>{const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]),navigationContext={appName:this._appConfig.appName,game:runtimeContextState.activeGame,applicationData};this._store.dispatchIntent(new NavigationHistory_intent["b"](this._appConfig,navigationContext))})}replaceCurrentNavigationHistoryItem(applicationData){return this.validate(this,"replaceNavigationHistoryState",{applicationData},this.validateDispose,this.validateMicroAppActive).then(()=>{const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]),navigationContext={appName:this._appConfig.appName,game:runtimeContextState.activeGame,applicationData};this._store.dispatchIntent(new NavigationHistory_intent["c"](this._appConfig,navigationContext))})}getGameSpecificMicroApps(game){return this.validateDispose(this,"getGameSpecificMicroApps",{game}).then(()=>this._store.dispatchIntent(new Api_intents["h"](game)))}getTransversalMicroApps(){return this.validateDispose(this,"getTransversalApps",{}).then(()=>this._store.dispatchIntent(new Api_intents["h"]))}isMicroAppAvailable(appName,game){const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]);return this.validateDispose(this,"isMicroAppAvailable",{appName,game}).then(()=>this._store.dispatchIntent(new Api_intents["i"](appName,null!==game&&void 0!==game?game:runtimeContextState.activeGame)))}observeRuntimeContext(callback){const observer=this.createObserver(callback);return this.validateDispose(this,"observeRuntimeContext",{}).then(()=>this._store.dispatchIntent(new RuntimeContext_intents["b"](observer))).then(()=>{this._observers.push(observer)})}observeGamepad(callback){return this.validateDispose(this,"observeGamepad",{}).then(()=>this._store.dispatchIntent(new Input_intents["j"](this._appConfig.spaceId,callback)))}setInputLegend(items){return this.validate(this,"setInputLegend",{items},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new InputLegend_intent["a"](this._appConfig,items)))}setHotKeys(buttons){return this.validate(this,"setHotKeys",{buttons},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new HotKey_intent["b"](this._appConfig,buttons)))}notifyInternalFocusChanged(){return this.validate(this,"notifyInternalFocusChanged",{},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new Input_intents["g"]))}notifyComponentIsSelected(componentType){return this.validate(this,"notifyComponentIsSelected",{componentType},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new Input_intents["c"](componentType)))}releaseFocus(direction="left"){return this.validate(this,"releaseFocus",{direction},this.validateDispose,this.validateMicroAppActive,this.validateContainerNavigationNotInProgress).then(()=>this._store.dispatchIntent(new Api_intents["e"](this._appConfig,direction)))}setTitle(title){return this.validate(this,"setTitle",{title},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new TitleBar_intent["b"](this._appConfig,title)))}resetTitle(){return this.validate(this,"resetTitle",{},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new TitleBar_intent["a"](this._appConfig)))}reportFatalError(error){return this.validateDispose(this,"reportFatalError",{}).then(()=>this._store.dispatchIntent(new Api_intents["f"](this._appConfig,error)))}_observePlayerNotifications(callback){return this.validateDispose(this,"observePlayerNotifications",{}).then(()=>this._store.dispatchIntent(new PlayerNotification_intents["c"](this._appConfig.spaceId,callback)))}_configurePlayerNotifications(config){return null==(null===config||void 0===config?void 0:config.notificationTypes)||null==(null===config||void 0===config?void 0:config.spaceIds)?Promise.reject("Invalid player notifications configuration."):this.validateDispose(this,"configurePlayerNotifications",{}).then(async()=>{await this._store.dispatchIntent(new PlayerNotification_intents["e"](config.notificationTypes,config.spaceIds))})}dispose(){var _a,_b,_c,_d,_e,_f,_g;this._logger.debug("dispose",{appConfig:this._appConfig,logCategory:LogCategory["a"].api}),this._disposed=!0;const observers=this._observers;this._observers=[],this._store.dispatchIntent(new RuntimeContext_intents["d"](observers)),this._store.dispatchIntent(new Input_intents["k"](this._appConfig.spaceId)),this._store.dispatchIntent(new GameInvites_intents["j"](this._appConfig.spaceId)),this._store.dispatchIntent(new PlayerNotification_intents["d"](this._appConfig.spaceId)),this._store.dispatchIntent(new Streaming_intents["e"](this._appConfig.spaceId)),null===(_a=this._ubiServices)||void 0===_a||_a.revoke(),null===(_b=this._pcClientProxy)||void 0===_b||_b.revoke(),null===(_c=this._pcClientWrapper)||void 0===_c||_c.clear(),null===(_d=this._gameInvitesProxy)||void 0===_d||_d.revoke(),null===(_e=this._streamingProxy)||void 0===_e||_e.revoke(),this.isDisposable(null===(_f=this._viewModeProxy)||void 0===_f?void 0:_f.proxy)&&this._viewModeProxy.proxy.dispose(),null===(_g=this._viewModeProxy)||void 0===_g||_g.revoke(),this._ubiServices=null}isDisposable(disposable){return"object"===typeof disposable&&"dispose"in disposable}createObserver(callback){return{next:value=>{try{const retValue=callback(value);retValue instanceof Promise&&retValue.catch(err=>{this.logCallbackError(err)})}catch(err){this.logCallbackError(err)}}}}logCallbackError(err){this._logger.error("logCallbackError",{error:err,appConfig:this._appConfig,logCategory:LogCategory["a"].api})}async validate(disposable,methodName,args,...validators){return this._apiValidationService.validate(disposable,methodName,args,validators)}async validateDispose(disposable,methodName,data){return this._apiValidationService.validateDispose(disposable,methodName,data)}async validateMicroAppActive(disposable,methodName,data){return this._apiValidationService.validateMicroAppActive(disposable,methodName,data)}async validateContainerNavigationNotInProgress(disposable,methodName,data){return this._apiValidationService.validateContainerNavigationNotInProgress(disposable,methodName,data)}async getUbiServices(){return this._ubiServices||(this._ubiServices=await this._store.dispatchIntent(new Api_intents["b"](this._appConfig))),this._ubiServices.proxy}getPcClientInterface(){var _a;if(this._pcClientWrapper)return null===(_a=this._pcClientProxy)||void 0===_a?void 0:_a.proxy}async gameInvitesEnabled(){return void 0!==this.gameInvites}async sendGameInvite(profileId){return this.validateDispose(this,"sendGameInvite",{profileId}).then(()=>{const runtimeContextState=this._store.getReadonlyState(RuntimeContext_state["a"]);return this._store.dispatchIntent(new GameInvites_intents["h"](profileId,runtimeContextState.hostGame,this._unusedGameSessionId))})}async acceptGameInvite(profileId,gameAppId,gameSpaceId,gameSessionId){var _a;return(null===(_a=this.gameInvites)||void 0===_a?void 0:_a.v1.acceptGameInvite(profileId,{applicationId:gameAppId,spaceId:gameSpaceId},gameSessionId))||!1}async declineGameInvite(profileId,gameAppId,gameSpaceId,gameSessionId){var _a;return(null===(_a=this.gameInvites)||void 0===_a?void 0:_a.v1.declineGameInvite(profileId,{applicationId:gameAppId,spaceId:gameSpaceId},gameSessionId))||!1}async getCurrentGameInvites(){var _a;let gameInvites=await(null===(_a=this.gameInvites)||void 0===_a?void 0:_a.v1.getCurrentGameInvites()),gameInviteEvents=(null===gameInvites||void 0===gameInvites?void 0:gameInvites.map(gameInvite=>({profileId:gameInvite.profileId,state:gameInvite.state,gameAppId:gameInvite.gameId.applicationId,gameSpaceId:gameInvite.gameId.spaceId,gameSessionId:gameInvite.gameSessionReference})))||[];return gameInviteEvents}async observeGameInvites(callback){var _a;const wrappedCallback=gameInvite=>{const gameInviteEvent={profileId:gameInvite.profileId,state:gameInvite.state,gameAppId:gameInvite.gameId.applicationId,gameSpaceId:gameInvite.gameId.spaceId,gameSessionId:gameInvite.gameSessionReference};callback(gameInviteEvent)};return null===(_a=this.gameInvites)||void 0===_a?void 0:_a.v1.observeGameInvites(wrappedCallback)}async joinGame(profileId,gameAppId,gameSpaceId,gameSessionId){var _a;return null===(_a=this.gameInvites)||void 0===_a?void 0:_a.v1.joinGame(profileId,{applicationId:gameAppId,spaceId:gameSpaceId},gameSessionId)}async sendDnaEvent(eventName,eventData){return this.validateDispose(this,"sendDnaEvent",{eventName,eventData}).then(()=>this._store.dispatchIntent(new Api_intents["j"](this.applicationConfig,eventName,eventData)))}async setMicroAppViewMode(mode){return this.validate(this,"setMicroAppViewMode",{mode},this.validateDispose,this.validateMicroAppActive).then(()=>this._store.dispatchIntent(new ViewMode_intents["c"](mode)))}get gameInvites(){var _a;return this._pc