n v.toString(16)})}}},"77dd":function(module,__webpack_exports__,__webpack_require__){"use strict"},9795:function(module,__webpack_exports__,__webpack_require__){"use strict"},"9b8a":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return LocalStorageQueue}));var _LocalStorageService__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("5ad8");class LocalStorageQueue{constructor(_storageKeyPrefix,_idAccessor,_errorCallback){this._storageKeyPrefix=_storageKeyPrefix,this._idAccessor=_idAccessor,this._errorCallback=_errorCallback,this._localStorageService=new _LocalStorageService__WEBPACK_IMPORTED_MODULE_0__["a"],this._storedKeys=this._localStorageService.getKeys(key=>key.startsWith(this._storageKeyPrefix))}push(item){const id=this._idAccessor(item),key="".concat(this._storageKeyPrefix,"_").concat(id),entry={data:item,key};try{this._localStorageService.setObjectSync(key,entry),-1===this._storedKeys.indexOf(key)&&this._storedKeys.push(key)}catch(e){this._errorCallback&&this._errorCallback(e)}}getItems(){const keys=[...this._storedKeys],result=[];return keys.forEach(key=>{const item=this._localStorageService.getObject(key);item?result.push(item.data):this._storedKeys.splice(this._storedKeys.indexOf(key),1)}),result}shift(){const key=this._storedKeys.shift();if(key){const item=this._localStorageService.getObject(key);return this._localStorageService.deleteValue(key),item}}delete(items){for(const item of items){const id="number"===typeof item?item:this._idAccessor(item),key="".concat(this._storageKeyPrefix,"_").concat(id);this._localStorageService.deleteValue(key);const index=this._storedKeys.indexOf(key);-1!==index&&this._storedKeys.splice(index,1)}}deleteAll(){this._storedKeys.forEach(key=>this._localStorageService.deleteValue(key)),this._storedKeys=[]}get length(){return this._storedKeys.length||0}update(item){const key="".concat(this._storageKeyPrefix,"_").concat(this._idAccessor(item));try{this._localStorageService.setObjectSync(key,{data:item,key})}catch(e){this._errorCallback&&this._errorCallback(e)}}}},b171:function(module,__webpack_exports__,__webpack_require__){"use strict";var CountryCode;(function(CountryCode){CountryCode["Afghanistan"]="AF",CountryCode["AlandIslands"]="AX",CountryCode["Albania"]="AL",CountryCode["Algeria"]="DZ",CountryCode["AmericanSamoa"]="AS",CountryCode["Andorra"]="AD",CountryCode["Angola"]="AO",CountryCode["Anguilla"]="AI",CountryCode["Antarctica"]="AQ",CountryCode["AntiguaAndBarbuda"]="AG",CountryCode["Argentina"]="AR",CountryCode["Armenia"]="AM",CountryCode["Aruba"]="AW",CountryCode["Australia"]="AU",CountryCode["Austria"]="AT",CountryCode["Azerbaijan"]="AZ",CountryCode["Bahamas"]="BS",CountryCode["Bahrain"]="BH",CountryCode["Bangladesh"]="BD",CountryCode["Barbados"]="BB",CountryCode["Belarus"]="BY",CountryCode["Belgium"]="BE",CountryCode["Belize"]="BZ",CountryCode["Benin"]="BJ",CountryCode["Bermuda"]="BM",CountryCode["Bhutan"]="BT",CountryCode["Bolivia"]="BO",CountryCode["BosniaAndHerzegovina"]="BA",CountryCode["Botswana"]="BW",CountryCode["BouvetIsland"]="BV",CountryCode["Brazil"]="BR",CountryCode["BritishIndianOceanTerritory"]="IO",CountryCode["BruneiDarussalam"]="BN",CountryCode["Bulgaria"]="BG",CountryCode["BurkinaFaso"]="BF",CountryCode["Burundi"]="BI",CountryCode["Cambodia"]="KH",CountryCode["Cameroon"]="CM",CountryCode["Canada"]="CA",CountryCode["CapeVerde"]="CV",CountryCode["CaymanIslands"]="KY",CountryCode["CentralAfricanRepublic"]="CF",CountryCode["Chad"]="TD",CountryCode["Chile"]="CL",CountryCode["China"]="CN",CountryCode["ChristmasIsland"]="CX",CountryCode["CocosKeelingIslands"]="CC",CountryCode["Colombia"]="CO",CountryCode["Comoros"]="KM",CountryCode["Congo"]="CG",CountryCode["CongoDemocraticRepublic"]="CD",CountryCode["CookIslands"]="CK",CountryCode["CostaRica"]="CR",CountryCode["CoteDIvoire"]="CI",CountryCode["Croatia"]="HR",CountryCode["Cuba"]="CU",CountryCode["Cyprus"]="CY",CountryCode["CzechRepublic"]="CZ",CountryCode["Denmark"]="DK",CountryCode["Djibouti"]="DJ",CountryCode["Dominica"]="DM",CountryCode["DominicanRepublic"]="DO",CountryCode["Ecuador"]="EC",CountryCode["Egypt"]="EG",CountryCode["ElSalvador"]="SV",CountryCode["EquatorialGuinea"]="GQ",CountryCode["Eritrea"]="ER",CountryCode["Estonia"]="EE",CountryCode["Ethiopia"]="ET",CountryCode["FalklandIslands"]="FK",CountryCode["FaroeIslands"]="FO",CountryCode["Fiji"]="FJ",CountryCode["Finland"]="FI",CountryCode["France"]="FR",CountryCode["FrenchGuiana"]="GF",CountryCode["FrenchPolynesia"]="PF",CountryCode["FrenchSouthernTerritories"]="TF",CountryCode["Gabon"]="GA",CountryCode["Gambia"]="GM",CountryCode["Georgia"]="GE",CountryCode["Germany"]="DE",CountryCode["Ghana"]="GH",CountryCode["Gibraltar"]="GI",CountryCode["Greece"]="GR",CountryCode["Greenland"]="GL",CountryCode["Grenada"]="GD",CountryCode["Guadeloupe"]="GP",CountryCode["Guam"]="GU",CountryCode["Guatemala"]="GT",CountryCode["Guernsey"]="GG",CountryCode["Guinea"]="GN",CountryCode["GuineaBissau"]="GW",CountryCode["Guyana"]="GY",CountryCode["Haiti"]="HT",CountryCode["HeardIslandMcdonaldIslands"]="HM",CountryCode["HolySeeVaticanCityState"]="VA",CountryCode["Honduras"]="HN",CountryCode["HongKong"]="HK",CountryCode["Hungary"]="HU",CountryCode["Iceland"]="IS",CountryCode["India"]="IN",CountryCode["Indonesia"]="ID",CountryCode["Iran"]="IR",CountryCode["Iraq"]="IQ",CountryCode["Ireland"]="IE",CountryCode["IsleOfMan"]="IM",CountryCode["Israel"]="IL",CountryCode["Italy"]="IT",CountryCode["Jamaica"]="JM",CountryCode["Japan"]="JP",CountryCode["Jersey"]="JE",CountryCode["Jordan"]="JO",CountryCode["Kazakhstan"]="KZ",CountryCode["Kenya"]="KE",CountryCode["Kiribati"]="KI",CountryCode["Korea"]="KR",CountryCode["Kuwait"]="KW",CountryCode["Kyrgyzstan"]="KG",CountryCode["LaoPeoplesDemocraticRepublic"]="LA",CountryCode["Latvia"]="LV",CountryCode["Lebanon"]="LB",CountryCode["Lesotho"]="LS",CountryCode["Liberia"]="LR",CountryCode["LibyanArabJamahiriya"]="LY",CountryCode["Liechtenstein"]="LI",CountryCode["Lithuania"]="LT",CountryCode["Luxembourg"]="LU",CountryCode["Macao"]="MO",CountryCode["Macedonia"]="MK",CountryCode["Madagascar"]="MG",CountryCode["Malawi"]="MW",CountryCode["Malaysia"]="MY",CountryCode["Maldives"]="MV",CountryCode["Mali"]="ML",CountryCode["Malta"]="MT",CountryCode["MarshallIslands"]="MH",CountryCode["Martinique"]="MQ",CountryCode["Mauritania"]="MR",CountryCode["Mauritius"]="MU",CountryCode["Mayotte"]="YT",CountryCode["Mexico"]="MX",CountryCode["Micronesia"]="FM",CountryCode["Moldova"]="MD",CountryCode["Monaco"]="MC",CountryCode["Mongolia"]="MN",CountryCode["Montenegro"]="ME",CountryCode["Montserrat"]="MS",CountryCode["Morocco"]="MA",CountryCode["Mozambique"]="MZ",CountryCode["Myanmar"]="MM",CountryCode["Namibia"]="NA",CountryCode["Nauru"]="NR",CountryCode["Nepal"]="NP",CountryCode["Netherlands"]="NL",CountryCode["NetherlandsAntilles"]="AN",CountryCode["NewCaledonia"]="NC",CountryCode["NewZealand"]="NZ",CountryCode["Nicaragua"]="NI",CountryCode["Niger"]="NE",CountryCode["Nigeria"]="NG",CountryCode["Niue"]="NU",CountryCode["NorfolkIsland"]="NF",CountryCode["NorthernMarianaIslands"]="MP",CountryCode["Norway"]="NO",CountryCode["Oman"]="OM",CountryCode["Pakistan"]="PK",CountryCode["Palau"]="PW",CountryCode["PalestinianTerritory"]="PS",CountryCode["Panama"]="PA",CountryCode["PapuaNewGuinea"]="PG",CountryCode["Paraguay"]="PY",CountryCode["Peru"]="PE",CountryCode["Philippines"]="PH",CountryCode["Pitcairn"]="PN",CountryCode["Poland"]="PL",CountryCode["Portugal"]="PT",CountryCode["PuertoRico"]="PR",CountryCode["Qatar"]="QA",CountryCode["Reunion"]="RE",CountryCode["Romania"]="RO",CountryCode["RussianFederation"]="RU",CountryCode["Rwanda"]="RW",CountryCode["SaintBarthelemy"]="BL",CountryCode["SaintHelena"]="SH",CountryCode["SaintKittsAndNevis"]="KN",CountryCode["SaintLucia"]="LC",CountryCode["SaintMartin"]="MF",CountryCode["SaintPierreAndMiquelon"]="PM",CountryCode["SaintVincentAndGrenadines"]="VC",CountryCode["Samoa"]="WS",CountryCode["SanMarino"]="SM",CountryCode["SaoTomeAndPrincipe"]="ST",CountryCode["SaudiArabia"]="SA",CountryCode["Senegal"]="SN",CountryCode["Serbia"]="RS",CountryCode["Seychelles"]="SC",CountryCode["SierraLeone"]="SL",CountryCode["Singapore"]="SG",CountryCode["Slovakia"]="SK",CountryCode["Slovenia"]="SI",CountryCode["SolomonIslands"]="SB",CountryCode["Somalia"]="SO",CountryCode["SouthAfrica"]="ZA",CountryCode["SouthGeorgiaAndSandwichIsl"]="GS",CountryCode["Spain"]="ES",CountryCode["SriLanka"]="LK",CountryCode["Sudan"]="SD",CountryCode["Suriname"]="SR",CountryCode["SvalbardAndJanMayen"]="SJ",CountryCode["Swaziland"]="SZ",CountryCode["Sweden"]="SE",CountryCode["Switzerland"]="CH",CountryCode["SyrianArabRepublic"]="SY",CountryCode["Taiwan"]="TW",CountryCode["Tajikistan"]="TJ",CountryCode["Tanzania"]="TZ",CountryCode["Thailand"]="TH",CountryCode["TimorLeste"]="TL",CountryCode["Togo"]="TG",CountryCode["Tokelau"]="TK",CountryCode["Tonga"]="TO",CountryCode["TrinidadAndTobago"]="TT",CountryCode["Tunisia"]="TN",CountryCode["Turkey"]="TR",CountryCode["Turkmenistan"]="TM",CountryCode["TurksAndCaicosIslands"]="TC",CountryCode["Tuvalu"]="TV",CountryCode["Uganda"]="UG",CountryCode["Ukraine"]="UA",CountryCode["UnitedArabEmirates"]="AE",CountryCode["UnitedKingdom"]="GB",CountryCode["UnitedStates"]="US",CountryCode["UnitedStatesOutlyingIslands"]="UM",CountryCode["Uruguay"]="UY",CountryCode["Uzbekistan"]="UZ",CountryCode["Vanuatu"]="VU",CountryCode["Venezuela"]="VE",CountryCode["VietNam"]="VN",CountryCode["VirginIslandsBritish"]="VG",CountryCode["VirginIslandsUS"]="VI",CountryCode["WallisAndFutuna"]="WF",CountryCode["WesternSahara"]="EH",CountryCode["Yemen"]="YE",CountryCode["Zambia"]="ZM",CountryCode["Zimbabw"]="ZW"})(CountryCode||(CountryCode={}))},b5ea:function(module,__webpack_exports__,__webpack_require__){"use strict"},c3ec:function(module,__webpack_exports__,__webpack_require__){"use strict"},c7a9:function(module,__webpack_exports__,__webpack_require__){"use strict"},c94a:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return OutgoingContextId})),__webpack_require__.d(__webpack_exports__,"a",(function(){return LegacyPcClientTransportService_LegacyPcClientTransportService})),__webpack_require__.d(__webpack_exports__,"c",(function(){return PcClientCommunicationService_PcClientCommunicationService})),__webpack_require__.d(__webpack_exports__,"d",(function(){return PcClientCommunicationServiceWrapper}));var esm=__webpack_require__("134b"),client_messages=__webpack_require__("4451"),NotificationState=__webpack_require__("424d"),NotificationType=__webpack_require__("f4b8"),ActivityStatus=__webpack_require__("0aa4"),UPNGameSessionStatus=__webpack_require__("4911"),dist_esm=__webpack_require__("0f0f"),SharePlayNetworkQuality=__webpack_require__("1e6f"),SharePlayStopSessionReason=__webpack_require__("8eb8"),shell_messages_dist_esm=__webpack_require__("f350");const networkQualityLegacyToModernMap={[SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Unknown]:shell_messages_dist_esm["V"].NetworkQualityUnknown,[SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Good]:shell_messages_dist_esm["V"].NetworkQualityGood,[SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Fair]:shell_messages_dist_esm["V"].NetworkQualityFair,[SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Poor]:shell_messages_dist_esm["V"].NetworkQualityPoor},networkQualityModernToLegacyMap={[shell_messages_dist_esm["V"].NetworkQualityUnknown]:SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Unknown,[shell_messages_dist_esm["V"].NetworkQualityGood]:SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Good,[shell_messages_dist_esm["V"].NetworkQualityFair]:SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Fair,[shell_messages_dist_esm["V"].NetworkQualityPoor]:SharePlayNetworkQuality["a"].SharePlayNetworkQuality_Poor},stopSessionReasonLegacyToModernMap={[SharePlayStopSessionReason["a"].SharePlaySessionStop_CanceledByHost]:shell_messages_dist_esm["sb"].SessionStopCanceledByHost,[SharePlayStopSessionReason["a"].SharePlaySessionStop_RejectedByGuest]:shell_messages_dist_esm["sb"].SessionStopRejectedByGuest,[SharePlayStopSessionReason["a"].SharePlaySessionStop_InviteExpired]:shell_messages_dist_esm["sb"].SessionStopInviteExpired,[SharePlayStopSessionReason["a"].SharePlaySessionStop_GuestDisconnected]:shell_messages_dist_esm["sb"].SessionStopGuestDisconnected,[SharePlayStopSessionReason["a"].SharePlaySessionStop_GuestRemovedByHost]:shell_messages_dist_esm["sb"].SessionStopGuestRemovedByHost,[SharePlayStopSessionReason["a"].SharePlaySessionStop_GameClosed]:shell_messages_dist_esm["sb"].SessionStopGameClosed,[SharePlayStopSessionReason["a"].SharePlaySessionStop_CancelledByGuestGame]:shell_messages_dist_esm["sb"].SessionStopCancelledByGuestGame,[SharePlayStopSessionReason["a"].SharePlaySessionStop_PlaySessionExpired]:shell_messages_dist_esm["sb"].SessionStopPlaySessionExpired,[SharePlayStopSessionReason["a"].SharePlaySessionStop_SessionInterruptedbyGuest]:shell_messages_dist_esm["sb"].SessionInterruptedByGuest},stopSessionReasonModernToLegacyMap={[shell_messages_dist_esm["sb"].SessionStopCanceledByHost]:SharePlayStopSessionReason["a"].SharePlaySessionStop_CanceledByHost,[shell_messages_dist_esm["sb"].SessionStopRejectedByGuest]:SharePlayStopSessionReason["a"].SharePlaySessionStop_RejectedByGuest,[shell_messages_dist_esm["sb"].SessionStopInviteExpired]:SharePlayStopSessionReason["a"].SharePlaySessionStop_InviteExpired,[shell_messages_dist_esm["sb"].SessionStopGuestDisconnected]:SharePlayStopSessionReason["a"].SharePlaySessionStop_GuestDisconnected,[shell_messages_dist_esm["sb"].SessionStopGuestRemovedByHost]:SharePlayStopSessionReason["a"].SharePlaySessionStop_GuestRemovedByHost,[shell_messages_dist_esm["sb"].SessionStopGameClosed]:SharePlayStopSessionReason["a"].SharePlaySessionStop_GameClosed,[shell_messages_dist_esm["sb"].SessionStopCancelledByGuestGame]:SharePlayStopSessionReason["a"].SharePlaySessionStop_CancelledByGuestGame,[shell_messages_dist_esm["sb"].SessionStopPlaySessionExpired]:SharePlayStopSessionReason["a"].SharePlaySessionStop_PlaySessionExpired,[shell_messages_dist_esm["sb"].SessionInterruptedByGuest]:SharePlayStopSessionReason["a"].SharePlaySessionStop_SessionInterruptedbyGuest};class IncomingMessageToModernTypeConverter_IncomingMessageToModernTypeConverter{constructor(){this._incomingMessageToHostNotificationConverterMap=new Map,this._incomingMessageToHostRequestConverterMap=new Map,this.registerMessageToHostNotificationConverter(client_messages["u"],()=>new shell_messages_dist_esm["ob"]),this.registerMessageToHostNotificationConverter(client_messages["j"],()=>new shell_messages_dist_esm["A"]),this.registerMessageToHostNotificationConverter(client_messages["x"],message=>new shell_messages_dist_esm["Cb"]({ticket:message.myTicket})),this.registerMessageToHostNotificationConverter(client_messages["k"],message=>{const messageNotification=message.myNotification;return new shell_messages_dist_esm["e"]({uiNotification:{id:messageNotification.myId,isPersistent:messageNotification.myIsPersistent,type:this.convertToUINotificationType(messageNotification.myType),state:this.convertToUINotificationState(messageNotification.myState),accountId:messageNotification.myAccountId,inviteId:messageNotification.myInviteId,timestamp:messageNotification.myTimestamp,json:messageNotification.myJSON}})}),this.registerMessageToHostNotificationConverter(client_messages["m"],message=>new shell_messages_dist_esm["Bb"]({id:message.myId,state:this.convertToUINotificationState(message.myState)})),this.registerMessageToHostNotificationConverter(client_messages["l"],message=>new shell_messages_dist_esm["g"]({id:message.myId})),this.registerMessageToHostNotificationConverter(client_messages["d"],message=>new shell_messages_dist_esm["xb"]({processId:message.myProcessId,fpsUpdate:message.myFpsUpdate})),this.registerMessageToHostNotificationConverter(client_messages["y"],message=>new shell_messages_dist_esm["Db"]({userActivityStatus:this.convertToUserActivityStatus(message.myActivityStatus),previousUserActivityStatus:this.convertToUserActivityStatus(message.myPrevActivityStatus)})),this.registerMessageToHostNotificationConverter(client_messages["h"],message=>{const gameSession=message.myGameSession;return new shell_messages_dist_esm["zb"]({inviterProfileId:message.myInviterProfileId,gameSession:{applicationId:gameSession.myUbiAppId,gameSpaceId:gameSession.myGameSpaceId,gameSessionId:gameSession.myGameSessionId},state:message.myStatus===UPNGameSessionStatus["a"].Added?dist_esm["GameInviteState"].Pending:dist_esm["GameInviteState"].Accepted,ttlMs:message.myTtlMs,creationTimestampMs:message.myCreationTimestampMs})}),this.registerMessageToHostRequestConverter(client_messages["n"],message=>new shell_messages_dist_esm["S"]({navigationContext:{appName:message.microAppName,applicationData:message.microAppParams}})),this.registerMessageToHostRequestConverter(client_messages["o"],message=>new shell_messages_dist_esm["Q"]({navigationContext:{appName:message.microAppName,applicationData:message.microAppParams},requestId:message.requestId,senderId:message.senderId})),this.registerMessageToHostNotificationConverter(client_messages["w"],message=>{const user=message.mySettings.user,overlay=message.mySettings.overlay,notifications=message.mySettings.notifications,misc=message.mySettings.misc,hotKeys=message.mySettings.hotkeys_captureScreenshot,settings={user:{nonFriendGameInviteEnabled:user.non_friend_game_invite_enabled},overlay:{fpsEnabled:overlay.fps_enabled},notifications:{inGameEnabled:notifications.inGameEnabled,friendRequestEnabled:notifications.desktopFriendRequestEnabled,friendOnlineEnabled:notifications.desktopFriendOnlineEnabled,friendGameEnabled:notifications.desktopFriendGameEnabled,gameInviteEnabled:notifications.desktopGameInviteEnabled,downloadCompleteEnabled:notifications.desktopDownloadCompleteEnabled,gamePatchAvailableEnabled:notifications.desktopGamePatchAvailableEnabled,playAvailableEnabled:notifications.desktopPlayAvailableEnabled,screenshotsEnabled:notifications.desktopScreenshotsEnabled,groupInviteEnabled:notifications.desktopGroupInviteEnabled,chatEnabled:notifications.desktopChatEnabled},misc:{saveScreenshotUncompressedCopy:misc.save_screenshot_uncompressed_copy},hotKeys};return new shell_messages_dist_esm["Ab"]({settings})}),this.registerMessageToHostNotificationConverter(client_messages["q"],message=>new shell_messages_dist_esm["vb"]({networkQuality:networkQualityLegacyToModernMap[message.myNetworkQuality],latency:message.myLatency})),this.registerMessageToHostNotificationConverter(client_messages["v"],message=>new shell_messages_dist_esm["wb"]({state:message.myState,invitationToken:message.myToken,guests:message.myGuests.map(guest=>({guestId:guest.myGuestId,profileId:guest.myProfileId,settings:{permissions:{gamepad:guest.mySettings.myPermissions.myGamepad,keyboard:guest.mySettings.myPermissions.myKeyboard,mouse:guest.mySettings.myPermissions.myMouse,immersive:guest.mySettings.myPermissions.myImmersive}}})),settings:{bitrateMbps:message.mySettings.myBitrateMbps},error:message.myError})),this.registerMessageToHostNotificationConverter(client_messages["r"],message=>new shell_messages_dist_esm["z"]({gameId:message.myGameId,guestId:message.myGuestId,streamingTS:message.myStreamingTS,sessionDurationMax:message.mySessionDurationMax})),this.registerMessageToHostNotificationConverter(client_messages["s"],message=>new shell_messages_dist_esm["E"]({guestId:message.myGuestId})),this.registerMessageToHostNotificationConverter(client_messages["t"],message=>new shell_messages_dist_esm["hb"]({guestId:message.myGuestId,stopReason:stopSessionReasonLegacyToModernMap[message.myStopReason]}))}registerMessageToHostNotificationConverter(ctor,converter){this._incomingMessageToHostNotificationConverterMap.set(ctor.type,converter)}registerMessageToHostRequestConverter(ctor,converter){this._incomingMessageToHostRequestConverterMap.set(ctor.type,converter)}incomingMessageToHostNotification(message,contextId){const converter=this._incomingMessageToHostNotificationConverterMap.get(message.myMessageName),notification=converter?converter(message):this.convertUnknownMessageToHostNotification(message);return notification.contextId=contextId,notification}convertUnknownMessageToHostNotification(message){return Object.assign(Object.assign({},message),{hostNotificationName:message.myMessageName})}incomingMessageToHostRequest(message,contextId){const converter=this._incomingMessageToHostRequestConverterMap.get(message.myMessageName);if(converter){const request=converter(message);return request.contextId=contextId,request}}convertToUINotificationType(type){return shell_messages_dist_esm["ub"][NotificationType["a"][type]]}convertToUINotificationState(state){return shell_messages_dist_esm["tb"][NotificationState["a"][state].replace("NotificationState_","")]}convertToUserActivityStatus(status){return shell_messages_dist_esm["Eb"][ActivityStatus["a"][status]]}}class HostNotificationToIncomingMessageConverter_HostNotificationToIncomingMessageConverter{constructor(){this._notificationToMessageConverterMap=new Map,this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["ob"],()=>new client_messages["u"]),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["A"],()=>new client_messages["j"]),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["Cb"],notification=>new client_messages["x"]({myTicket:notification.ticket})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["e"],notification=>{const uiNotification=notification.uiNotification;return new client_messages["k"]({myNotification:{myId:uiNotification.id,myIsPersistent:uiNotification.isPersistent,myType:this.convertToNotificationType(uiNotification.type),myState:this.convertToNotificationState(uiNotification.state),myAccountId:uiNotification.accountId,myInviteId:uiNotification.inviteId,myTimestamp:uiNotification.timestamp,myJSON:uiNotification.json}})}),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["Bb"],notification=>new client_messages["m"]({myId:notification.id,myState:this.convertToNotificationState(notification.state)})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["g"],notification=>new client_messages["l"]({myId:notification.id})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["xb"],notification=>new client_messages["d"]({myProcessId:notification.processId,myFpsUpdate:notification.fpsUpdate})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["Db"],notification=>new client_messages["y"]({myActivityStatus:this.convertToActivityStatus(notification.userActivityStatus),myPrevActivityStatus:this.convertToActivityStatus(notification.previousUserActivityStatus)})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["zb"],notification=>{const gameSession=notification.gameSession;return new client_messages["h"]({myInviterProfileId:notification.inviterProfileId,myGameSession:{myUbiAppId:gameSession.applicationId,myGameSpaceId:gameSession.gameSpaceId,myGameSessionId:gameSession.gameSessionId},myStatus:notification.state===dist_esm["GameInviteState"].Pending?UPNGameSessionStatus["a"].Added:UPNGameSessionStatus["a"].Removed,myTtlMs:notification.ttlMs,myCreationTimestampMs:notification.creationTimestampMs})}),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["Ab"],notification=>{const user=notification.settings.user,overlay=notification.settings.overlay,notifications=notification.settings.notifications,misc=notification.settings.misc,hotkeys=notification.settings.hotKeys;return new client_messages["w"]({mySettings:{user:{non_friend_game_invite_enabled:user.nonFriendGameInviteEnabled},overlay:{fps_enabled:overlay.fpsEnabled},notifications:{inGameEnabled:notifications.inGameEnabled,desktopFriendRequestEnabled:!!notifications.friendRequestEnabled,desktopFriendOnlineEnabled:!!notifications.friendOnlineEnabled,desktopFriendGameEnabled:!!notifications.friendGameEnabled,desktopGameInviteEnabled:!!notifications.gameInviteEnabled,desktopDownloadCompleteEnabled:!!notifications.downloadCompleteEnabled,desktopGamePatchAvailableEnabled:!!notifications.gamePatchAvailableEnabled,desktopPlayAvailableEnabled:!!notifications.playAvailableEnabled,desktopScreenshotsEnabled:!!notifications.screenshotsEnabled,desktopGroupInviteEnabled:!!notifications.groupInviteEnabled,desktopChatEnabled:!!notifications.chatEnabled},misc:{save_screenshot_uncompressed_copy:misc.saveScreenshotUncompressedCopy},hotkeys_captureScreenshot:hotkeys}})}),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["vb"],notification=>new client_messages["q"]({myNetworkQuality:networkQualityModernToLegacyMap[notification.networkQuality],myLatency:notification.latency})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["z"],notification=>new client_messages["r"]({myGameId:notification.gameId,myGuestId:notification.guestId,myStreamingTS:notification.streamingTS,mySessionDurationMax:notification.sessionDurationMax})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["E"],notification=>new client_messages["s"]({myGuestId:notification.guestId})),this.registerHostNotificationToMessageConverter(shell_messages_dist_esm["hb"],notification=>new client_messages["t"]({myGuestId:notification.guestId,myStopReason:stopSessionReasonModernToLegacyMap[notification.stopReason]}))}registerHostNotificationToMessageConverter(ctor,converter){this._notificationToMessageConverterMap.set(ctor.type,converter)}hostNotificationToIncomingMessage(notification){const converter=this._notificationToMessageConverterMap.get(notification.hostNotificationName);return converter?converter(notification):this.convertUnknownHostNotificationToMessage(notification)}convertUnknownHostNotificationToMessage(notification){return Object.assign(Object.assign({},notification),{myMessageName:notification.hostNotificationName})}convertToNotificationType(type){return NotificationType["a"][shell_messages_dist_esm["ub"][type]]}convertToNotificationState(state){return NotificationState["a"]["NotificationState_"+shell_messages_dist_esm["tb"][state]]}convertToActivityStatus(status){return ActivityStatus["a"][shell_messages_dist_esm["Eb"][status]]}convertMessageToHostNotificationType(legacyMessageType){var _a;const notificationCtor=HostNotificationToIncomingMessageConverter_HostNotificationToIncomingMessageConverter.messageToNotificationTypeMap[legacyMessageType];return null!==(_a=null===notificationCtor||void 0===notificationCtor?void 0:notificationCtor.type)&&void 0!==_a?_a:legacyMessageType}}HostNotificationToIncomingMessageConverter_HostNotificationToIncomingMessageConverter.messageToNotificationTypeMap={[client_messages["u"].type]:shell_messages_dist_esm["ob"],[client_messages["j"].type]:shell_messages_dist_esm["A"],[client_messages["x"].type]:shell_messages_dist_esm["Cb"],[client_messages["k"].type]:shell_messages_dist_esm["e"],[client_messages["m"].type]:shell_messages_dist_esm["Bb"],[client_messages["l"].type]:shell_messages_dist_esm["g"],[client_messages["d"].type]:shell_messages_dist_esm["xb"],[client_messages["y"].type]:shell_messages_dist_esm["Db"],[client_messages["h"].type]:shell_messages_dist_esm["zb"],[client_messages["w"].type]:shell_messages_dist_esm["Ab"],[client_messages["q"].type]:shell_messages_dist_esm["vb"],[client_messages["r"].type]:shell_messages_dist_esm["z"],[client_messages["s"].type]:shell_messages_dist_esm["E"],[client_messages["t"].type]:shell_messages_dist_esm["hb"]};class ModernTypeToOutgoingMessageConverter_ModernTypeToOutgoingMessageConverter{constructor(){this._shellNotificationToOutgoingMessageConverterMap=new Map,this._shellResponseToOutgoingMessageConverterMap=new Map,this.registerShellNotificationConverter(shell_messages_dist_esm["j"],notification=>{const gameSession=notification.gameSession;return new client_messages["e"]({myProfileIdsToInvite:notification.profileIdsToInvite,myGameSession:{myUbiAppId:gameSession.applicationId,myGameSpaceId:gameSession.gameSpaceId,myGameSessionId:gameSession.gameSessionId}})}),this.registerShellNotificationConverter(shell_messages_dist_esm["c"],notification=>{const gameSession=notification.gameSession;return new client_messages["f"]({myInviterProfileId:notification.inviterProfileId,myGameSession:{myUbiAppId:gameSession.applicationId,myGameSpaceId:gameSession.gameSpaceId,myGameSessionId:gameSession.gameSessionId}})}),this.registerShellNotificationConverter(shell_messages_dist_esm["f"],notification=>{const gameSession=notification.gameSession;return new client_messages["g"]({myInviterProfileId:notification.inviterProfileId,myGameSession:{myUbiAppId:gameSession.applicationId,myGameSpaceId:gameSession.gameSpaceId,myGameSessionId:gameSession.gameSessionId}})}),this.registerShellNotificationConverter(shell_messages_dist_esm["J"],notification=>{const gameSession=notification.gameSession;return new client_messages["i"]({myProfileIdToJoin:notification.profileIdToJoin,myGameSession:{myUbiAppId:gameSession.applicationId,myGameSpaceId:gameSession.gameSpaceId,myGameSessionId:gameSession.gameSessionId}})}),this.registerShellResponseConverter(shell_messages_dist_esm["R"],response=>new client_messages["p"]({result:response.isSuccessful,requestId:response.requestId,senderId:response.senderId})),this.registerShellNotificationConverter(shell_messages_dist_esm["X"],()=>new client_messages["b"]),this.registerShellNotificationConverter(shell_messages_dist_esm["Y"],()=>new client_messages["c"]),this.registerShellNotificationConverter(shell_messages_dist_esm["W"],()=>new client_messages["a"])}registerShellNotificationConverter(ctor,converter){this._shellNotificationToOutgoingMessageConverterMap.set(ctor.type,converter)}shellNotificationToOutgoingMessage(notification){const converter=this._shellNotificationToOutgoingMessageConverterMap.get(notification.shellNotificationName);return converter?converter(notification):this.convertUnknownShellNotificationToOutgoingMessage(notification)}convertUnknownShellNotificationToOutgoingMessage(notification){return Object.assign(Object.assign({},notification),{myMessageName:notification.shellNotificationName})}registerShellResponseConverter(ctor,converter){this._shellResponseToOutgoingMessageConverterMap.set(ctor.type,converter)}shellResponseToOutgoingMessage(response){const converter=this._shellResponseToOutgoingMessageConverterMap.get(response.shellResponseName);if(converter)return converter(response)}}class OutgoingMessageToShellNotificationConverter_OutgoingMessageToShellNotificationConverter{constructor(){this._messageToNotificationConverterMap=new Map,this.registerMessageToShellNotificationConverter(client_messages["e"],message=>{const gameSession=message.myGameSession;return new shell_messages_dist_esm["j"]({profileIdsToInvite:message.myProfileIdsToInvite.map(id=>id),gameSession:{applicationId:gameSession.myUbiAppId,gameSpaceId:gameSession.myGameSpaceId,gameSessionId:gameSession.myGameSessionId}})}),this.registerMessageToShellNotificationConverter(client_messages["f"],message=>{const gameSession=message.myGameSession;return new shell_messages_dist_esm["c"]({inviterProfileId:message.myInviterProfileId,gameSession:{applicationId:gameSession.myUbiAppId,gameSpaceId:gameSession.myGameSpaceId,gameSessionId:gameSession.myGameSessionId}})}),this.registerMessageToShellNotificationConverter(client_messages["g"],message=>{const gameSession=message.myGameSession;return new shell_messages_dist_esm["f"]({inviterProfileId:message.myInviterProfileId,gameSession:{applicationId:gameSession.myUbiAppId,gameSpaceId:gameSession.myGameSpaceId,gameSessionId:gameSession.myGameSessionId}})}),this.registerMessageToShellNotificationConverter(client_messages["i"],message=>{const gameSession=message.myGameSession;return new shell_messages_dist_esm["J"]({profileIdToJoin:message.myProfileIdToJoin,gameSession:{applicationId:gameSession.myUbiAppId,gameSpaceId:gameSession.myGameSpaceId,gameSessionId:gameSession.myGameSessionId}})}),this.registerMessageToShellNotificationConverter(client_messages["b"],()=>new shell_messages_dist_esm["X"]),this.registerMessageToShellNotificationConverter(client_messages["c"],()=>new shell_messages_dist_esm["Y"]),this.registerMessageToShellNotificationConverter(client_messages["a"],()=>new shell_messages_dist_esm["W"])}registerMessageToShellNotificationConverter(ctor,converter){this._messageToNotificationConverterMap.set(ctor.type,converter)}outgoingMessageToShellNotification(message){const converter=this._messageToNotificationConverterMap.get(message.myMessageName);return converter?converter(message):this.convertUnknownMessageToShellNotification(message)}convertUnknownMessageToShellNotification(message){return Object.assign(Object.assign({},message),{shellNotificationName:message.myMessageName})}}class LegacyPcClientMessageConverter_LegacyPcClientMessageConverter{constructor(_incomingMessageToModernTypeConverter=new IncomingMessageToModernTypeConverter_IncomingMessageToModernTypeConverter,_hostNotificationToIncomingMessageConverter=new HostNotificationToIncomingMessageConverter_HostNotificationToIncomingMessageConverter,_outgoingMessageToShellNotificationConverter=new OutgoingMessageToShellNotificationConverter_OutgoingMessageToShellNotificationConverter,_modernTypeToOutgoingMessageConverter=new ModernTypeToOutgoingMessageConverter_ModernTypeToOutgoingMessageConverter){this._incomingMessageToModernTypeConverter=_incomingMessageToModernTypeConverter,this._hostNotificationToIncomingMessageConverter=_hostNotificationToIncomingMessageConverter,this._outgoingMessageToShellNotificationConverter=_outgoingMessageToShellNotificationConverter,this._modernTypeToOutgoingMessageConverter=_modernTypeToOutgoingMessageConverter}incomingMessageToHostNotification(message,contextId){return this._incomingMessageToModernTypeConverter.incomingMessageToHostNotification(message,contextId)}incomingMessageToHostRequest(message,contextId){return this._incomingMessageToModernTypeConverter.incomingMessageToHostRequest(message,contextId)}hostNotificationToIncomingMessage(notification){return this._hostNotificationToIncomingMessageConverter.hostNotificationToIncomingMessage(notification)}outgoingMessageToShellNotification(message){return this._outgoingMessageToShellNotificationConverter.outgoingMessageToShellNotification(message)}shellNotificationToOutgoingMessage(notification){return this._modernTypeToOutgoingMessageConverter.shellNotificationToOutgoingMessage(notification)}shellResponseToOutgoingMessage(response){return this._modernTypeToOutgoingMessageConverter.shellResponseToOutgoingMessage(response)}convertMessageToHostNotificationType(legacyMessageType){return this._hostNotificationToIncomingMessageConverter.convertMessageToHostNotificationType(legacyMessageType)}}class HostResponseToIncomingQueryResultConverter_HostResponseToIncomingQueryResultConverter{constructor(){this._hostResponseToIncomingQueryResultConverterMap=new Map,this.registerHostResponseToQueryResultConverter(shell_messages_dist_esm["gb"],response=>new client_messages["F"]({mySuccess:response.isSuccessful})),this.registerHostResponseToQueryResultConverter(shell_messages_dist_esm["m"],response=>new client_messages["E"]({myInvites:response.invites.map(invite=>({myProfileId:invite.profileId,myGameSession:{myUbiAppId:invite.gameId.applicationId,myGameSpaceId:invite.gameId.spaceId,myGameSessionId:invite.gameSessionReference}}))})),this.registerHostResponseToQueryResultConverter(shell_messages_dist_esm["cb"],response=>new client_messages["I"]({mySuccess:response.isSuccessful,mySource:response.source})),this.registerHostResponseToQueryResultConverter(shell_messages_dist_esm["y"],response=>new client_messages["H"]({myActivityStatus:this.convertToActivityStatus(response.userActivityStatus)})),this.registerHostResponseToQueryResultConverter(shell_messages_dist_esm["s"],response=>{const hostSettings=response.settings,user=hostSettings.user,overlay=hostSettings.overlay,notifications=hostSettings.notifications,misc=hostSettings.misc,hotKeys=hostSettings.hotKeys,settings={user:{non_friend_game_invite_enabled:user.nonFriendGameInviteEnabled},overlay:{fps_enabled:overlay.fpsEnabled},notifications:{inGameEnabled:notifications.inGameEnabled,desktopFriendRequestEnabled:!!notifications.friendRequestEnabled,desktopFriendOnlineEnabled:!!notifications.friendOnlineEnabled,desktopFriendGameEnabled:!!notifications.friendGameEnabled,desktopGameInviteEnabled:!!notifications.gameInviteEnabled,desktopDownloadCompleteEnabled:!!notifications.downloadCompleteEnabled,desktopGamePatchAvailableEnabled:!!notifications.gamePatchAvailableEnabled,desktopPlayAvailableEnabled:!!notifications.playAvailableEnabled,desktopScreenshotsEnabled:!!notifications.screenshotsEnabled,desktopGroupInviteEnabled:!!notifications.groupInviteEnabled,desktopChatEnabled:!!notifications.chatEnabled},misc:{save_screenshot_uncompressed_copy:misc.saveScreenshotUncompressedCopy},hotkeys_captureScreenshot:hotKeys};return new client_messages["G"]({mySettings:settings})})}registerHostResponseToQueryResultConverter(ctor,converter){this._hostResponseToIncomingQueryResultConverterMap.set(ctor.type,converter)}hostResponseToIncomingQueryResult(response,id){const converter=this._hostResponseToIncomingQueryResultConverterMap.get(response.hostResponseName);if(converter){const queryResult=converter(response);return queryResult.myDispatchId=id,queryResult}return this.convertUnknownHostResponseToQueryResult(response,id)}convertUnknownHostResponseToQueryResult(response,id){return Object.assign(Object.assign({},response),{myQueryResultName:response.hostResponseName,myDispatchId:id})}convertToActivityStatus(status){return ActivityStatus["a"][shell_messages_dist_esm["Eb"][status]]}}class IncomingQueryResultToHostResponseConverter_IncomingQueryResultToHostResponseConverter{constructor(){this._incomingQueryResultToHostResponseConverterMap=new Map,this.registerQueryResultToHostResponseConverter(client_messages["F"],queryResult=>new shell_messages_dist_esm["gb"]({isSuccessful:queryResult.mySuccess})),this.registerQueryResultToHostResponseConverter(client_messages["E"],queryResult=>new shell_messages_dist_esm["m"]({invites:queryResult.myInvites.map(invite=>{const gameSession=invite.myGameSession;return{profileId:invite.myProfileId,gameId:{applicationId:gameSession.myUbiAppId,spaceId:gameSession.myGameSpaceId},state:dist_esm["GameInviteState"].Pending,gameSessionReference:gameSession.myGameSessionId}})})),this.registerQueryResultToHostResponseConverter(client_messages["I"],queryResult=>new shell_messages_dist_esm["cb"]({isSuccessful:queryResult.mySuccess,source:queryResult.mySource})),this.registerQueryResultToHostResponseConverter(client_messages["J"],queryResult=>new shell_messages_dist_esm["rb"]({isSuccessful:queryResult.mySuccess,error:queryResult.myError})),this.registerQueryResultToHostResponseConverter(client_messages["K"],queryResult=>new shell_messages_dist_esm["u"]({state:queryResult.myState,invitationToken:queryResult.myToken,guests:queryResult.myGuests.map(guest=>({guestId:guest.myGuestId,profileId:guest.myProfileId,settings:{permissions:{gamepad:guest.mySettings.myPermissions.myGamepad,keyboard:guest.mySettings.myPermissions.myKeyboard,mouse:guest.mySettings.myPermissions.myMouse,immersive:guest.mySettings.myPermissions.myImmersive}}})),settings:{bitrateMbps:queryResult.mySettings.myBitrateMbps},error:queryResult.myError})),this.registerQueryResultToHostResponseConverter(client_messages["H"],queryResult=>new shell_messages_dist_esm["y"]({userActivityStatus:this.convertToUserActivityStatus(queryResult.myActivityStatus)})),this.registerQueryResultToHostResponseConverter(client_messages["G"],queryResult=>{const settings=this.parseSettings(queryResult.mySettings),user=settings.user,overlay=settings.overlay,notifications=settings.notifications,misc=settings.misc,hotKeys=settings.hotkeys_captureScreenshot,hostSettings={user:{nonFriendGameInviteEnabled:user.non_friend_game_invite_enabled},overlay:{fpsEnabled:overlay.fps_enabled},notifications:{inGameEnabled:notifications.inGameEnabled,friendRequestEnabled:notifications.desktopFriendRequestEnabled,friendOnlineEnabled:notifications.desktopFriendOnlineEnabled,friendGameEnabled:notifications.desktopFriendGameEnabled,gameInviteEnabled:notifications.desktopGameInviteEnabled,downloadCompleteEnabled:notifications.desktopDownloadCompleteEnabled,gamePatchAvailableEnabled:notifications.desktopGamePatchAvailableEnabled,playAvailableEnabled:notifications.desktopPlayAvailableEnabled,screenshotsEnabled:notifications.desktopScreenshotsEnabled,groupInviteEnabled:notifications.desktopGroupInviteEnabled,chatEnabled:notifications.desktopChatEnabled},misc:{saveScreenshotUncompressedCopy:misc.save_screenshot_uncompressed_copy},hotKeys};return new shell_messages_dist_esm["s"]({settings:hostSettings})})}registerQueryResultToHostResponseConverter(ctor,converter){this._incomingQueryResultToHostResponseConverterMap.set(ctor.type,converter)}incomingQueryResultToHostResponse(queryResult,contextId){const converter=this._incomingQueryResultToHostResponseConverterMap.get(queryResult.myQueryResultName),response=converter?converter(queryResult):this.convertUnknownQueryResultToHostResponse(queryResult);return response.contextId=contextId,response}convertUnknownQueryResultToHostResponse(queryResult){return Object.assign(Object.assign({},queryResult),{hostResponseName:queryResult.myQueryResultName})}convertToUserActivityStatus(status){return shell_messages_dist_esm["Eb"][ActivityStatus["a"][status]]}parseSettings(data){const badTypeMessage=type=>`Settings received from Game is of a wrong type. Expected string of object, received '${type}'`;switch(typeof data){case"string":Object(esm["assert"])(""!==data,badTypeMessage("empty string"));try{const settings=JSON.parse(data);return settings}catch(e){throw new Error("Error parsing Game Settings json:"+e.toString())}case"object":return Object(esm["assert"])(null!==data,badTypeMessage("null")),Object(esm["assert"])(!Array.isArray(data),badTypeMessage("array")),data;default:throw new Error("Settings received from Game is of unsupported type:"+typeof data)}}}class OutgoingQueryResultToShellResponseConverter{outgoingQueryResultToShellResponse(queryResult,contextId){return Object.assign(Object.assign({},queryResult),{shellResponseName:queryResult.myQueryResultName,contextId})}}class ShellResponseToOutgoingQueryResultConverter{shellResponseToOutgoingQueryResult(response,id){return Object.assign(Object.assign({},response),{myQueryResultName:response.shellResponseName,myDispatchId:id})}}class LegacyPcClientQueryResultConverter_LegacyPcClientQueryResultConverter{constructor(_incomingQueryResultToHostResponseConverter=new IncomingQueryResultToHostResponseConverter_IncomingQueryResultToHostResponseConverter,_hostResponseToIncomingQueryResultConverter=new HostResponseToIncomingQueryResultConverter_HostResponseToIncomingQueryResultConverter,_outgoingQueryResultToShellResponseConverter=new OutgoingQueryResultToShellResponseConverter,_shellResponseToOutgoingQueryResultConverter=new ShellResponseToOutgoingQueryResultConverter){this._incomingQueryResultToHostResponseConverter=_incomingQueryResultToHostResponseConverter,this._hostResponseToIncomingQueryResultConverter=_hostResponseToIncomingQueryResultConverter,this._outgoingQueryResultToShellResponseConverter=_outgoingQueryResultToShellResponseConverter,this._shellResponseToOutgoingQueryResultConverter=_shellResponseToOutgoingQueryResultConverter}incomingQueryResultToHostResponse(queryResult,contextId){return this._incomingQueryResultToHostResponseConverter.incomingQueryResultToHostResponse(queryResult,contextId)}hostResponseToIncomingQueryResult(response,id){return this._hostResponseToIncomingQueryResultConverter.hostResponseToIncomingQueryResult(response,id)}outgoingQueryResultToShellResponse(queryResult,contextId){return this._outgoingQueryResultToShellResponseConverter.outgoingQueryResultToShellResponse(queryResult,contextId)}shellResponseToOutgoingQueryResult(response,id){return this._shellResponseToOutgoingQueryResultConverter.shellResponseToOutgoingQueryResult(response,id)}}class HostRequestToIncomingQueryConverter{hostRequestToIncomingQuery(request,id){return Object.assign(Object.assign({},request),{myQueryName:request.hostRequestName,myDispatchId:id,myResponseType:void 0})}}class IncomingQueryToHostRequestConverter{incomingQueryToHostRequest(query,contextId){return Object.assign(Object.assign({},query),{hostRequestName:query.myQueryName,contextId})}}class OutgoingQueryToShellRequestConverter_OutgoingQueryToShellRequestConverter{constructor(){this._queryToShellRequestConverterMap=new Map,this.registerQueryToShellRequestConverter(client_messages["A"],query=>new shell_messages_dist_esm["fb"]({channelId:query.myChannelId})),this.registerQueryToShellRequestConverter(client_messages["z"],()=>new shell_messages_dist_esm["l"]),this.registerQueryToShellRequestConverter(client_messages["D"],query=>new shell_messages_dist_esm["bb"]({gameInviteId:query.myGameInviteId,response:query.myResponse,source:query.mySource})),this.registerQueryToShellRequestConverter(client_messages["C"],()=>new shell_messages_dist_esm["x"]),this.registerQueryToShellRequestConverter(client_messages["B"],()=>new shell_messages_dist_esm["r"])}registerQueryToShellRequestConverter(ctor,converter){this._queryToShellRequestConverterMap.set(ctor.type,converter)}outgoingQueryToShellRequest(query){const converter=this._queryToShellRequestConverterMap.get(query.myQueryName);return converter?converter(query):this.convertUnknownQueryToShellRequest(query)}convertUnknownQueryToShellRequest(query){return Object.assign(Object.assign({},query),{shellRequestName:query.myQueryName})}}class ShellRequestToOutgoingQueryConverter_ShellRequestToOutgoingQueryConverter{constructor(){this._shellRequestToQueryConverterMap=new Map,this.registerShellRequestToQueryConverter(shell_messages_dist_esm["fb"],request=>new client_messages["A"]({myChannelId:request.channelId})),this.registerShellRequestToQueryConverter(shell_messages_dist_esm["l"],()=>new client_messages["z"]),this.registerShellRequestToQueryConverter(shell_messages_dist_esm["bb"],request=>new client_messages["D"]({myGameInviteId:request.gameInviteId,myResponse:request.response,mySource:request.source})),this.registerShellRequestToQueryConverter(shell_messages_dist_esm["x"],()=>new client_messages["C"]),this.registerShellRequestToQueryConverter(shell_messages_dist_esm["r"],()=>new client_messages["B"]),this.registerShellRequestToQueryConverter(shell_messages_dist_esm["qb"],()=>new client_messages["L"]),this.registerShellRequestToQueryConverter(shell_messages_dist_esm["t"],()=>new client_messages["M"])}registerShellRequestToQueryConverter(ctor,converter){this._shellRequestToQueryConverterMap.set(ctor.type,converter)}shellRequestToOutgoingQuery(request,id){const converter=this._shellRequestToQueryConverterMap.get(request.shellRequestName);if(converter){const query=converter(request);return query.myDispatchId=id,query}return this.convertUnknownShellRequestToQuery(request,id)}convertUnknownShellRequestToQuery(request,requestId){return Object.assign(Object.assign({},request),{myQueryName:request.shellRequestName,myDispatchId:requestId,myResponseType:void 0})}}class LegacyPcClientQueryConverter_LegacyPcClientQueryConverter{constructor(_incomingQueryToHostRequestConverter=new IncomingQueryToHostRequestConverter,_hostRequestToIncomingQueryConverter=new HostRequestToIncomingQueryConverter,_outgoingQueryToShellRequestConverter=new OutgoingQueryToShellRequestConverter_OutgoingQueryToShellRequestConverter,_shellRequestToOutgoingQueryConverter=new ShellRequestToOutgoingQueryConverter_ShellRequestToOutgoingQueryConverter){this._incomingQueryToHostRequestConverter=_incomingQueryToHostRequestConverter,this._hostRequestToIncomingQueryConverter=_hostRequestToIncomingQueryConverter,this._outgoingQueryToShellRequestConverter=_outgoingQueryToShellRequestConverter,this._shellRequestToOutgoingQueryConverter=_shellRequestToOutgoingQueryConverter}incomingQueryToHostRequest(query,contextId){return this._incomingQueryToHostRequestConverter.incomingQueryToHostRequest(query,contextId)}hostRequestToIncomingQuery(request,id){return this._hostRequestToIncomingQueryConverter.hostRequestToIncomingQuery(request,id)}outgoingQueryToShellRequest(query){return this._outgoingQueryToShellRequestConverter.outgoingQueryToShellRequest(query)}shellRequestToOutgoingQuery(request,id){return this._shellRequestToOutgoingQueryConverter.shellRequestToOutgoingQuery(request,id)}}var OutgoingContextId,__awaiter=function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};(function(OutgoingContextId){OutgoingContextId[OutgoingContextId["Message"]=-1]="Message",OutgoingContextId[OutgoingContextId["Query"]=1]="Query"})(OutgoingContextId||(OutgoingContextId={}));class LegacyPcClientTransportService_LegacyPcClientTransportService extends shell_messages_dist_esm["b"]{constructor(_logger,_messageConverter=new LegacyPcClientMessageConverter_LegacyPcClientMessageConverter,_queryConverter=new LegacyPcClientQueryConverter_LegacyPcClientQueryConverter,_queryResultConverter=new LegacyPcClientQueryResultConverter_LegacyPcClientQueryResultConverter){super(),this._logger=_logger,this._messageConverter=_messageConverter,this._queryConverter=_queryConverter,this._queryResultConverter=_queryResultConverter,this._dispatchCounter=1,window.uplayMessage=this.onIncomingUplayCommunication.bind(this),window.umpMessage=this.onIncomingCommunication.bind(this)}static isAvailable(){return"function"===typeof(null===window||void 0===window?void 0:window.umpUiMessage)}onIncomingUplayCommunication(type,payload,contextId){return __awaiter(this,void 0,void 0,(function*(){this._logger.warn("[DEPRECATED] uplayMessage: received communication from and old method, please update client to use umpMessage instead!"),yield this.onIncomingCommunication(type,payload,contextId)}))}onIncomingCommunication(type,payload,contextId){return __awaiter(this,void 0,void 0,(function*(){switch(this._logger.info("Incoming communication",{type,payload,contextId}),!0){case/^QueryResult/.test(type):yield this.onIncomingQueryResult(type,payload,contextId);break;case/^Query(?!Result)/.test(type):yield this.onIncomingQuery(type,payload,contextId);break;case/^Message/.test(type):yield this.onIncomingMessage(type,payload,contextId);break;default:yield this.onIncomingUnknownMessageType(type,payload,contextId)}}))}onIncomingQueryResult(type,payload,contextId){return __awaiter(this,void 0,void 0,(function*(){if(void 0!==contextId){payload.myQueryResultName||(payload.myQueryResultName=type);try{const response=this._queryResultConverter.incomingQueryResultToHostResponse(payload,contextId);return this.onResponse(response,payload.myDispatchId)}catch(error){const errorMessage=`An error occurred while trying to process query result with type ${type}.`;return this._logger.error(errorMessage,{error,payload}),Promise.reject(errorMessage)}}else this._logger.error("QueryResult has no context id: "+type)}))}onIncomingQuery(type,payload,contextId){return __awaiter(this,void 0,void 0,(function*(){payload.myQueryName||(payload.myQueryName=type);try{const request=this._queryConverter.incomingQueryToHostRequest(payload,contextId);return this.onRequest(request,payload.myDispatchId)}catch(error){this._logger.error("An error occurred while trying to process query",{error,payload})}}))}onIncomingMessage(type,message,contextId){return __awaiter(this,void 0,void 0,(function*(){message.myMessageName||(message.myMessageName=type);try{const hostRequest=this._messageConverter.incomingMessageToHostRequest(message,contextId);if(hostRequest)return this.onRequest(hostRequest,esm["UUID"].newId());const hostNotification=this._messageConverter.incomingMessageToHostNotification(message,contextId);return this.onNotification(hostNotification)}catch(error){this._logger.error("An error occurred while trying to process message",{error,message})}}))}onIncomingUnknownMessageType(type,payload,contextId){this._logger.warn("Received unknown message type. Type should start with 'Message', 'Query' or 'QueryResult'",{type,payload,contextId})}sendNotification(notification){return __awaiter(this,void 0,void 0,(function*(){const message=this._messageConverter.shellNotificationToOutgoingMessage(notification);return this.sendOutgoingCommunication(message.myMessageName,message,OutgoingContextId.Message)}))}sendRequest(request){return __awaiter(this,void 0,void 0,(function*(){const requestId=this._dispatchCounter++,query=this._queryConverter.shellRequestToOutgoingQuery(request,requestId);return yield this.sendOutgoingCommunication(query.myQueryName,query,OutgoingContextId.Query),requestId}))}sendResponse(response,id){return __awaiter(this,void 0,void 0,(function*(){if(response instanceof Error)return void this._logger.warn("An error was received as Shell response. It will not be forwarded to the legacy PC Client",{response,id});const message=this._messageConverter.shellResponseToOutgoingMessage(response);if(message)return this.sendOutgoingCommunication(message.myMessageName,message,OutgoingContextId.Message);const queryResult=this._queryResultConverter.shellResponseToOutgoingQueryResult(response,id);return this.sendOutgoingCommunication(queryResult.myQueryResultName,queryResult,response.contextId)}))}sendOutgoingCommunication(type,payload,contextId){this._logger.info("Outgoing communication",{type,payload,contextId});const stringifiedPayload=JSON.stringify(payload);void 0!==contextId?window.umpUiMessage(type,stringifiedPayload,contextId):window.umpUiMessage(type,stringifiedPayload)}cancelRequest(){return __awaiter(this,void 0,void 0,(function*(){return Promise.resolve()}))}canSendNotification(){return LegacyPcClientTransportService_LegacyPcClientTransportService.isAvailable()}canSendRequest(){return LegacyPcClientTransportService_LegacyPcClientTransportService.isAvailable()}canSendResponse(){return LegacyPcClientTransportService_LegacyPcClientTransportService.isAvailable()}canCancelRequest(){return LegacyPcClientTransportService_LegacyPcClientTransportService.isAvailable()}}var PcClientCommunicationService_awaiter=function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class PcClientCommunicationService_PcClientCommunicationService extends shell_messages_dist_esm["lb"]{constructor(logger,transportService,_messageConverter=new LegacyPcClientMessageConverter_LegacyPcClientMessageConverter,_queryConverter=new LegacyPcClientQueryConverter_LegacyPcClientQueryConverter,_queryResultConverter=new LegacyPcClientQueryResultConverter_LegacyPcClientQueryResultConverter){super(logger,transportService),this._messageConverter=_messageConverter,this._queryConverter=_queryConverter,this._queryResultConverter=_queryResultConverter,this._notificationListenersTransformMap=new Map,this._requestHandlersTransformMap=new Map}registerMessageListener(messageClass,listener){let listenerWrapper=this._notificationListenersTransformMap.get(listener);listenerWrapper||(listenerWrapper=notification=>{const message=this._messageConverter.hostNotificationToIncomingMessage(notification);listener(message)},this._notificationListenersTransformMap.set(listener,listenerWrapper));const hostNotificationType=this._messageConverter.convertMessageToHostNotificationType(messageClass.type);return this.registerListenerForNotificationType(hostNotificationType,listenerWrapper)}unregisterMessageListener(messageClass,listener){const listenerWrapper=this._notificationListenersTransformMap.get(listener);if(!listenerWrapper)return!1;const hostNotificationType=this._messageConverter.convertMessageToHostNotificationType(messageClass.type);return this.unregisterListenerForNotificationType(hostNotificationType,listenerWrapper)}registerQueryHandler(queryClass,handler){let handlerWrapper=this._requestHandlersTransformMap.get(handler);return handlerWrapper||(handlerWrapper=(request,id)=>PcClientCommunicationService_awaiter(this,void 0,void 0,(function*(){const query=this._queryConverter.hostRequestToIncomingQuery(request,id),queryResult=yield handler(query);return queryResult?this._queryResultConverter.outgoingQueryResultToShellResponse(queryResult,request.contextId):queryResult})),this._requestHandlersTransformMap.set(handler,handlerWrapper)),this.registerHandlerForRequestType(queryClass.type,handlerWrapper)}unregisterQueryHandler(queryClass,handler){const handlerWrapper=this._requestHandlersTransformMap.get(handler);return!!handlerWrapper&&this.unregisterHandlerForRequestType(queryClass.type,handlerWrapper)}sendQueryToClient(query){return PcClientCommunicationService_awaiter(this,void 0,void 0,(function*(){try{const request=this._queryConverter.outgoingQueryToShellRequest(query),result=yield this.sendRequest(request);return result?this._queryResultConverter.hostResponseToIncomingQueryResult(result.response,result.id):Promise.reject(`Client communication service not initialized. Attempting to query client with ${query.myQueryName}.`)}catch(error){const errorMessage=`An error occurred while trying to send query with type ${query.myQueryName}.`;return this._logger.error(errorMessage,{error,query}),Promise.reject(errorMessage)}}))}sendMessageToClient(message){return PcClientCommunicationService_awaiter(this,void 0,void 0,(function*(){try{const notification=this._messageConverter.outgoingMessageToShellNotification(message);yield this.sendNotification(notification)}catch(error){this._logger.error("An error occurred while trying to send message",{error,message})}}))}}var PcClientCommunicationServiceWrapper_awaiter=function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class PcClientCommunicationServiceWrapper{constructor(_communicationService){this._communicationService=_communicationService,this._messageListeners=new Map,this._queryHandlers=new Map,this._notificationListeners=new Map,this._requestHandlers=new Map}registerMessageListener(messageClass,listener){const result=this._communicationService.registerMessageListener(messageClass,listener);if(result){const list=this._messageListeners.get(messageClass)||[];list.push(listener),this._messageListeners.set(messageClass,list)}return result}registerNotificationListener(notificationClass,listener){const result=this._communicationService.registerNotificationListener(notificationClass,listener);if(result){const list=this._notificationListeners.get(notificationClass)||[];list.push(listener),this._notificationListeners.set(notificationClass,list)}return result}unregisterMessageListener(messageClass,listener){const result=this._communicationService.unregisterMessageListener(messageClass,listener);if(result){const list=this._messageListeners.get(messageClass)||[];list.splice(list.indexOf(listener),1),this._messageListeners.set(messageClass,list)}return result}unregisterNotificationListener(notificationClass,listener){const result=this._communicationService.unregisterNotificationListener(notificationClass,listener);if(result){const list=this._notificationListeners.get(notificationClass)||[];list.splice(list.indexOf(listener),1),this._notificationListeners.set(notificationClass,list)}return result}unregisterAllListeners(){this.unregisterAllMessageListeners(),this.unregisterAllNotificationListeners()}unregisterAllMessageListeners(){for(const[messageClass,listeners]of this._messageListeners.entries())for(const listener of listeners)this._communicationService.unregisterMessageListener(messageClass,listener)}unregisterAllNotificationListeners(){for(const[notificationClass,listeners]of this._notificationListeners.entries())for(const listener of listeners)this._communicationService.unregisterNotificationListener(notificationClass,listener)}registerQueryHandler(queryClass,handler){const result=this._communicationService.registerQueryHandler(queryClass,handler);return result&&this._queryHandlers.set(queryClass,handler),result}registerRequestHandler(requestClass,handler){const result=this._communicationService.registerRequestHandler(requestClass,handler);return result&&this._requestHandlers.set(requestClass,handler),result}unregisterQueryHandler(queryClass,handler){const result=this._communicationService.unregisterQueryHandler(queryClass,handler);return result&&this._queryHandlers.delete(queryClass),result}unregisterRequestHandler(requestClass,handler){const result=this._communicationService.unregisterRequestHandler(requestClass,handler);return result&&this._requestHandlers.delete(requestClass),result}unregisterAllHandlers(){this.unregisterAllQueryHandlers(),this.unregisterAllRequestHandlers()}unregisterAllQueryHandlers(){for(const[queryClass,handler]of this._queryHandlers.entries())this._communicationService.unregisterQueryHandler(queryClass,handler)}unregisterAllRequestHandlers(){for(const[requestClass,handler]of this._requestHandlers.entries())this._communicationService.unregisterRequestHandler(requestClass,handler)}clear(){this.unregisterAllHandlers(),this.unregisterAllListeners()}sendMessageToClient(message){this._communicationService.sendMessageToClient(message)}sendNotification(notification){return PcClientCommunicationServiceWrapper_awaiter(this,void 0,void 0,(function*(){return this._communicationService.sendNotification(notification)}))}sendQueryToClient(query){return PcClientCommunicationServiceWrapper_awaiter(this,void 0,void 0,(function*(){return this._communicationService.sendQueryToClient(query)}))}sendRequest(request){return PcClientCommunicationServiceWrapper_awaiter(this,void 0,void 0,(function*(){return this._communicationService.sendRequest(request)}))}cancelRequest(id){return PcClientCommunicationServiceWrapper_awaiter(this,void 0,void 0,(function*(){return this._communicationService.cancelRequest(id)}))}}},cb8e:function(module,__webpack_exports__,__webpack_require__){"use strict";var Iso639,LanguageCode;(function(Iso639){Iso639["AA"]="aa",Iso639["AB"]="ab",Iso639["AE"]="ae",Iso639["AF"]="af",Iso639["AK"]="ak",Iso639["AM"]="am",Iso639["AN"]="an",Iso639["AR"]="ar",Iso639["AS"]="as",Iso639["AV"]="av",Iso639["AY"]="ay",Iso639["AZ"]="az",Iso639["BA"]="ba",Iso639["BE"]="be",Iso639["BG"]="bg",Iso639["BH"]="bh",Iso639["BI"]="bi",Iso639["BM"]="bm",Iso639["BN"]="bn",Iso639["BO"]